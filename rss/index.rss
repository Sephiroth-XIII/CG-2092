<rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Code Jedi</title><description>Code, algorithms and design.</description><link>http://code-jedi.chintanghate.me/</link><generator>Ghost 0.5</generator><lastBuildDate>Sun, 30 Nov 2014 10:57:03 GMT</lastBuildDate><atom:link href="http://code-jedi.chintanghate.me/rss/" rel="self" type="application/rss+xml"/><ttl>60</ttl><item><title>Poetry</title><description>&lt;p&gt;Used In:    SRM 170 &lt;br&gt;
Used As:    Division II Level Three&lt;/p&gt;

&lt;h6 id="problemstatement"&gt;Problem Statement&lt;/h6&gt;

&lt;p&gt;Given a poem, determine its rhyme scheme.&lt;/p&gt;

&lt;p&gt;To simplify things, because English is such a fickle language, there are some constraints:&lt;/p&gt;

&lt;p&gt;A legal word is a sequence of lower or uppercase letters, containing at least one vowel, where a vowel is 'a', 'e', 'i', 'o', or 'u'. Also, 'y' is considered a vowel if it is not at the start or end of a word. Words are delimited by spaces.&lt;/p&gt;

&lt;p&gt;Two words are considered rhyming if they have the same ending pattern (defined below). This comparison is case-insensitive (see Example 1.)&lt;/p&gt;

&lt;p&gt;An ending pattern is a substring of a word such that:&lt;/p&gt;

&lt;p&gt;The word ends with that substring, &lt;br&gt;
The substring contains exactly one contiguous string of vowels, &lt;br&gt;
The first letter of the substring is a vowel, and &lt;br&gt;
The substring must either be the whole string, or the letter immediately preceding the start of the substring must be a nonvowel. &lt;br&gt;
For example, the ending pattern of "bought" is "ought", the ending pattern of "spying" would be "ying", and the ending pattern of "all" would be "all". (Note that "spy" has no vowels, and thus is not a legal word.)&lt;/p&gt;

&lt;p&gt;Two lines rhyme if their corresponding last words rhyme, and a line is empty if it contains no words.&lt;/p&gt;

&lt;p&gt;The procedure for determinining rhyme scheme is as follows: The first non-empty line in the poem should be labeled with the lowercase letter 'a'. Every line that rhymes with that line should also be labeled with that letter. The next unlabeled non-empty line should be labeled with the letter 'b', and any rhyming lines should also be labeled in this manner. When you run out of lowercase letters, continue by using the uppercase letters 'A' to 'Z'. Empty lines should be labeled with ' ' (the space character).&lt;/p&gt;

&lt;p&gt;The 0th character of the returned String should be the rhyme scheme label of the 0th line, the 1st character should be the label of the 1st line, and so on. This means that the returned String will have the same number of characters as there are elements in poem. Thus, given a String[] poem, then your method should return a String detailing the rhyme scheme.&lt;/p&gt;

&lt;h6 id="definition"&gt;Definition&lt;/h6&gt;

&lt;p&gt;Class:    Poetry &lt;br&gt;
Method:    rhymeScheme &lt;br&gt;
Parameters:    String[] &lt;br&gt;
Returns:    String &lt;br&gt;
Method signature:    String rhymeScheme(String[] poem) &lt;br&gt;
(be sure your method is public)&lt;/p&gt;

&lt;h6 id="notes"&gt;Notes&lt;/h6&gt;

&lt;ul&gt;
&lt;li&gt;If there is a blank line in the poem, there must be a corresponding space in the output. A blank line is one with no words. (See Example 1.)&lt;/li&gt;
&lt;/ul&gt;

&lt;h6 id="constraints"&gt;Constraints&lt;/h6&gt;

&lt;ul&gt;
&lt;li&gt;poem will have between 1 and 50 elements, inclusive.&lt;/li&gt;
&lt;li&gt;each element of poem will contain between 0 and 50 characters, inclusive.&lt;/li&gt;
&lt;li&gt;the only allowable characters in poem will be upper and lowercase characters ('a'-'z' and 'A'-'Z') and the space character (' ').&lt;/li&gt;
&lt;li&gt;there will be only legal words in poem&lt;/li&gt;
&lt;/ul&gt;

&lt;h6 id="examples"&gt;Examples&lt;/h6&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;{"I hope this problem", &lt;br&gt;
"is a whole lot better than",
"this stupid haiku"}
Returns: "abc" &lt;br&gt;
Doesn't even conceivably rhyme.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;{"     ", &lt;br&gt;
"Measure your height",
"AND WEIGHT      ",
"said the doctor",
"",
"And make sure to take your pills",
"   to   cure   your    ills",
"Every",
"DAY"}
Returns: " aab ccde" &lt;br&gt;
Even though "height" and "weight" don't actually rhyme in English, they do by the rules laid out above.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;{"One bright day in the middle of the night", &lt;br&gt;
"Two dead boys got up to fight",
"Back to back they faced each other",
"Drew their swords and shot each other",
"",
"A deaf policeman heard the noise",
"And came to arrest the two dead boys",
"And if you dont believe this lie is true",
"Ask the blind man he saw it too"}
Returns: "aabb cdef"&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;{"", &lt;br&gt;
"",
"",
""}
Returns: "    " &lt;br&gt;
Four lines from the mind of a blank poet.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;{"This poem has uppercase letters", &lt;br&gt;
"In its rhyme scheme",
"Alpha", "Blaster", "Cat", "Desert", "Elephant", "Frog", "Gulch", 
"Horse", "Ireland", "Jam", "Krispy Kreme", "Loofah", "Moo", "Narf",
"Old", "Pink", "Quash", "Rainbow", "Star", "Tour", "Uvula", "Very",
"Will", "Xmas", "Young", "Zed", "deception", "comic", "grout",
"oval", "cable", "rob", "steal", "steel", "weak"}
Returns: "abcdefghibjkblmnopqrstcuvwxyzABCbDEFG"&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;{" ", &lt;br&gt;
"     ",
"This poem",
"         ",
" ",
" ",
"",
"Has lots of blank lines",
" ",
"      ",
"                                            ",
"         ",
" ",
"              ",
"                                                  ",
"  in      it           "}
Returns: "  a    b       c"&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;{"too bad   your", &lt;br&gt;
"     solution went   sour"}
Returns: "aa"&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;hr&gt;

&lt;pre&gt;&lt;code class="prettyprint"&gt;#include &amp;lt;iostream&amp;gt;
#include &amp;lt;vector&amp;gt;
#include &amp;lt;string&amp;gt;
#include &amp;lt;sstream&amp;gt;
#include &amp;lt;map&amp;gt;
#include &amp;lt;algorithm&amp;gt;

using namespace std;

class Poetry {  
    private:
        bool isVowel(string s, int i) {
            if (s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u') {
                return true;
            } else if (s[i] == 'y' &amp;amp;&amp;amp; i != 0 &amp;amp;&amp;amp; i != s.size() - 1) {
                return true;
            }
            return false;
        }
        string endPattern(string s) {
            string ep = "";
            bool flag = true;
            for (int i = s.size() - 1; i &amp;gt;= 0; --i) {
                bool v = isVowel(s, i); 
                if (v) {
                    flag = false;
                }
                if (v || flag) {
                    ep = s[i] + ep;
                } else {
                    break;
                }
            }
            return ep;
        }
        bool isEmptyString(string s) {
            for (int i = 0; i &amp;lt; s.size(); ++i) {
                if (s[i] != ' ') {
                    return false;
                }
            }
            return true;
        }
        string lastWord(string s) {
            istringstream iss(s);
            string lw;
            while (iss &amp;gt;&amp;gt; lw);
            return lw;
        }
    public:
        string rhymeScheme(vector&amp;lt;string&amp;gt; poem) {
            vector&amp;lt;char&amp;gt; rhymingSeq;
            for (char i = 'a'; i &amp;lt;= 'z'; ++i) {
                rhymingSeq.push_back(i);
            }
            for (char i = 'A'; i &amp;lt;= 'Z'; ++i) {
                rhymingSeq.push_back(i);
            }
            map&amp;lt;string, char&amp;gt; pattern;
            string scheme = "";
            int seq = 0;
            for (int i = 0; i &amp;lt; poem.size(); ++i) {
                transform(poem[i].begin(), poem[i].end(), poem[i].begin(), ::tolower);
                if (!isEmptyString(poem[i])) {
                    string ep = endPattern(lastWord(poem[i]));
                    if (pattern.find(ep) == pattern.end()) {
                        pattern[ep] = rhymingSeq[seq++];
                    }
                    scheme += pattern[ep];
                } else {
                    scheme += " ";
                }
            }
            return scheme;
        }
};
&lt;/code&gt;&lt;/pre&gt;</description><link>http://code-jedi.chintanghate.me/2014/11/30/poetry/</link><guid isPermaLink="false">7b987ce1-2551-4210-9070-76a824bb2ab6</guid><category>TopCoder</category><dc:creator>Chintan Ghate</dc:creator><pubDate>Sun, 30 Nov 2014 10:25:31 GMT</pubDate></item><item><title>MatchMaking</title><description>&lt;p&gt;Used In:    SRM 203 &lt;br&gt;
Used As:    Division I Level One , Division II Level Two&lt;/p&gt;

&lt;h6 id="problemstatement"&gt;Problem Statement&lt;/h6&gt;

&lt;p&gt;You are developing the matchmaking component of an online dating site. Prospective members must fill out a questionnaire consisting of binary questions such as Do you prefer to vacation (a) in the mountains or (b) at the seaside? and Would you rather travel (a) by plane or (b) by train?&lt;/p&gt;

&lt;p&gt;You are to match up men with women by maximizing the number of answers each couple has in common. A man and a woman have an answer in common whenever they give the same answer to the same question. Conflicts can easily arise due to numerical ties, but you will be able to resolve all such conflicts using the following procedure. Note that there will be equal numbers of men and women, with names being unique in each sex.&lt;/p&gt;

&lt;p&gt;Take the woman whose name comes earliest in lexicographic order, and consider the men with whom she has the greatest number of answers in common. Among these men, pick the one whose name comes earliest in lexicographic order. You have found the woman's best match. Remove this couple from the dating pool, and repeat the matching procedure until there are no more singles left.&lt;/p&gt;

&lt;p&gt;You are given a String[], namesWomen, containing the names of single women, and another String[], answersWomen, containing their answers. The kth element of answersWomen lists the answers of the woman whose name is the kth element of namesWomen. If there are n questions in the questionnaire, then every element of answersWomen consists of n characters, each of which is either 'a' or 'b'. The answers are always given in the fixed questionnaire order. You are similarly given the String[]s namesMen and answersMen for the single men. Lastly, you are given a String, queryWoman, containing the name of a woman. Return the name of the man to whom she is matched after you have formed all couples according to the above rules.&lt;/p&gt;

&lt;h6 id="definition"&gt;Definition&lt;/h6&gt;

&lt;p&gt;Class:    MatchMaking &lt;br&gt;
Method:    makeMatch &lt;br&gt;
Parameters:    String[], String[], String[], String[], String &lt;br&gt;
Returns:    String &lt;br&gt;
Method signature:    String makeMatch(String[] namesWomen, String[] answersWomen, String[] namesMen, String[] answersMen, String queryWoman) &lt;br&gt;
(be sure your method is public)&lt;/p&gt;

&lt;h6 id="notes"&gt;Notes&lt;/h6&gt;

&lt;ul&gt;
&lt;li&gt;Lexicographic order is like dictionary order, with the difference that case matters. All uppercase letters take precedence over all lowercase letters. Thus, "boolean" comes before "boot"; "boo" comes before "boolean"; "Boot" comes before "boo"; "Zoo" comes before "boo".&lt;/li&gt;
&lt;/ul&gt;

&lt;h6 id="constraints"&gt;Constraints&lt;/h6&gt;

&lt;ul&gt;
&lt;li&gt;namesWomen contains between 1 and 50 elements, inclusive&lt;/li&gt;
&lt;li&gt;if namesWomen consists of n elements, then answersWomen, namesMen, and answersMen consist of n elements each&lt;/li&gt;
&lt;li&gt;each element of namesWomen and each element of namesMen is between 1 and 50 characters long, inclusive&lt;/li&gt;
&lt;li&gt;the only characters that may appear in namesMen and namesWomen are 'a' to 'z' and 'A' to 'Z'&lt;/li&gt;
&lt;li&gt;no two elements of namesWomen are alike&lt;/li&gt;
&lt;li&gt;no two elements of namesMen are alike&lt;/li&gt;
&lt;li&gt;the first element of answersWomen is between 1 and 50 characters long, inclusive&lt;/li&gt;
&lt;li&gt;if the first element of answersWomen consists of m characters, then each element of answersWomen and of answersMen is m characters long&lt;/li&gt;
&lt;li&gt;the only characters that may appear in answersWomen and answersMen are 'a' and 'b'&lt;/li&gt;
&lt;li&gt;queryWoman is one of the Strings in namesWomen&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Examples&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;{"Constance", "Bertha", "Alice"} &lt;br&gt;
{"aaba", "baab", "aaaa"}
{"Chip", "Biff", "Abe"}
{"bbaa", "baaa", "aaab"}
"Bertha"
Returns: "Biff" &lt;br&gt;
Alice has two answers in common with Chip and three answers in common with both Abe and Biff; Abe gets lexicographic preference. Bertha also has two answers in common with Chip and three answers in common with both Abe and Biff. Since Abe has already been matched to Alice, Bertha lands Biff.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;{"Constance", "Bertha", "Alice"} &lt;br&gt;
{"aaba", "baab", "aaaa"}
{"Chip", "Biff", "Abe"}
{"bbaa", "baaa", "aaab"}
"Constance"
Returns: "Chip" &lt;br&gt;
We are dealing with the same names and answers as before. Constance is the last to go. Although she has two answers in common with Abe and Biff, they are both taken. She ends up with Chip, with whom she has only one answer in common.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;{"Constance", "Alice", "Bertha", "Delilah", "Emily"} &lt;br&gt;
{"baabaa", "ababab", "aaabbb", "bababa", "baabba"}
{"Ed", "Duff", "Chip", "Abe", "Biff"}
{"aabaab", "babbab", "bbbaaa", "abbbba", "abaaba"}
"Constance"
Returns: "Duff"&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;{"Constance", "Alice", "Bertha", "Delilah", "Emily"} &lt;br&gt;
{"baabaa", "ababab", "aaabbb", "bababa", "baabba"}
{"Ed", "Duff", "Chip", "Abe", "Biff"}
{"aabaab", "babbab", "bbbaaa", "abbbba", "abaaba"}
"Delilah"
Returns: "Chip"&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;{"Constance", "Alice", "Bertha", "Delilah", "Emily"} &lt;br&gt;
{"baabaa", "ababab", "aaabbb", "bababa", "baabba"}
{"Ed", "Duff", "Chip", "Abe", "Biff"}
{"aabaab", "babbab", "bbbaaa", "abbbba", "abaaba"}
"Emily"
Returns: "Ed"&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;{"anne", "Zoe"} &lt;br&gt;
{"a", "a"}
{"bob", "chuck"}
{"a", "a"}
"Zoe"
Returns: "bob"&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;{"F", "M", "S", "h", "q", "g", "r", "N", "U", "x", "H", "P", &lt;br&gt;
"o", "E", "R", "z", "L", "m", "e", "u", "K", "A", "w", "Q",
"O", "v", "j", "a", "t", "p", "C", "G", "k", "c", "V", "B",
"D", "s", "n", "i", "f", "T", "I", "l", "d", "J", "y", "b"}
{"abaabbbb", "bbaabbbb", "aaabaaab", "aabbaaaa", "baabbaab",
"aaababba", "bbabbbbb", "bbbabbba", "aaabbbba", "aabbbaaa",
"abbabaaa", "babbabbb", "aaaaabba", "aaaabbaa", "abbbabaa",
"babababa", "abbaaaaa", "bbababba", "baaaaaba", "baaaaabb",
"bbbbabba", "ababbaaa", "abbbabab", "baabbbaa", "bbbaabbb",
"aababbab", "ababbabb", "abbaabba", "baabbabb", "aaabaaab",
"aabbbaba", "aabaaabb", "abababba", "aabbaaaa", "aabbabaa",
"bababaaa", "aabaaaab", "bbbbaabb", "baaababb", "abaabbab",
"aabbbaaa", "baabbaba", "bbabbbaa", "aabbbbaa", "abbbaaab",
"abababbb", "ababaaba", "bababaaa"}
{"f", "C", "v", "g", "Q", "z", "n", "c", "B", "o", "M", "F",
"u", "x", "I", "T", "K", "L", "E", "U", "w", "A", "d", "t",
"e", "R", "D", "s", "p", "q", "m", "r", "H", "j", "J", "V",
"l", "a", "k", "h", "G", "y", "i", "P", "O", "N", "b", "S"}
{"bbbaabab", "bbabaabb", "ababbbbb", "bbbababb", "baababaa",
"bbaaabab", "abbabbaa", "bbbabbbb", "aabbabab", "abbababa",
"aababbbb", "bababaab", "aaababbb", "baabbaba", "abaaaaab",
"bbaababa", "babaabab", "abbabbba", "ababbbab", "baabbbab",
"babbaaab", "abbbbaba", "bbabbbba", "baaabaab", "ababbabb",
"abbbaabb", "bbbbaabb", "bbbaaabb", "baabbaba", "bbabaaab",
"aabbbaab", "abbbbabb", "bbaaaaba", "bbbababa", "abbaabba",
"bababbbb", "aabaaabb", "babbabab", "baaaabaa", "ababbaba",
"aaabaabb", "bbaaabaa", "baaaaabb", "bbaabaab", "bbababab",
"aabaaaab", "aaaaabab", "aabbaaba"}
"U"
Returns: "x"&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;{"q", "M", "w", "y", "p", "N", "s", "r", "a", "H", "o", "n", &lt;br&gt;
"F", "m", "l", "b", "D", "j", "C", "u", "f", "I", "g", "L",
"i", "x", "A", "G", "O", "k", "h", "d", "c", "E", "B", "v",
"J", "z", "K", "e", "t"}
{"aabbaaabb", "baabababb", "bbaababba", "bbbaaaaaa", "abaaaabaa",
"bababbbab", "abbaabbaa", "aabababbb", "bababaaaa", "abbababaa",
"aabbbbbba", "bbabbabab", "babaabbba", "babbabbbb", "baaabbbbb",
"baaabaaaa", "aaabbaaab", "abbaabbbb", "abbabbbab", "bbaaaabba",
"babbaaabb", "aabbabbab", "baaababba", "ababaabab", "bbbaabbab",
"aaaabbabb", "babaaaaaa", "abbbbaaab", "aabaaabba", "bbbaaaaba",
"bbbbbbaab", "aabbaaabb", "aabaabbab", "aababaaba", "bbabbbbab",
"abbabaaab", "babaaabbb", "bababbaaa", "aabbaabaa", "baaabbabb",
"bbbbbbbbb"}
{"m", "k", "n", "q", "L", "E", "M", "l", "w", "x", "g", "e",
"i", "z", "F", "r", "a", "h", "f", "D", "J", "K", "j", "v",
"A", "t", "N", "y", "s", "c", "o", "p", "d", "b", "B", "G",
"O", "I", "u", "C", "H"}
{"bbaaabbba", "bbaaaaaab", "abaaababb", "baaaabbbb", "abbbababa",
"baaaaaaaa", "aabbbbbab", "aaaaabbba", "baabababb", "babaaabab",
"baaababaa", "bbbbaabba", "bbaabbabb", "bbaaababb", "abbabbaba",
"aababaaab", "abbbbbbaa", "aabbaabaa", "bbbaabbba", "abbabbaba",
"aaabbbaaa", "bbaabaaaa", "aabababbb", "abbbbabab", "baaabbbba",
"bababbbba", "aababbaab", "bbaabbaab", "bbbaaabbb", "babbbbabb",
"ababababb", "babaaabab", "bbaaaaaba", "aaaaabaaa", "abbaaabbb",
"bbbbababb", "baabababb", "bbaabaaaa", "aaababbbb", "abbbbbbba",
"bbaabbaaa"}
"o"
Returns: "C"&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;hr&gt;

&lt;pre&gt;&lt;code class="prettyprint"&gt;#include &amp;lt;iostream&amp;gt;
#include &amp;lt;vector&amp;gt;
#include &amp;lt;string&amp;gt;
#include &amp;lt;map&amp;gt;

using namespace std;

class MatchMaking {  
    private:
        int mathches(string a, string b) {
            int match = 0;
            for (int i = 0; i &amp;lt; a.size(); ++i) {
                if (a[i] == b[i]) {
                    ++match;
                }
            }
            return match;
        }

    public:
        string makeMatch(vector&amp;lt;string&amp;gt; namesWomen, vector&amp;lt;string&amp;gt; answerWomen, vector&amp;lt;string&amp;gt; namesMen, vector&amp;lt;string&amp;gt; answerMen, string queryWoman) {
            int n = namesMen.size();
            string theChosenOne = "";
            map&amp;lt;string, string&amp;gt; women, men;
            vector&amp;lt;bool&amp;gt; taken(n, false);
            for (int i = 0; i &amp;lt; n; ++i) {
                women[namesWomen[i]] = answerWomen[i];
                men[namesMen[i]] = answerMen[i];
            }
            for (map&amp;lt;string, string&amp;gt; :: iterator i = women.begin(); 
                i != women.end(); ++i) {
                int compatibility = -1;
                int index = 0,
                    jn = 0;
                for (map&amp;lt;string, string&amp;gt; :: iterator j = 
                    men.begin(); j != men.end(); ++j, ++jn) {
                    if (!taken[jn]) {
                        int match = mathches(i-&amp;gt;second, j-&amp;gt;second);
                        if (match &amp;gt; compatibility) {
                            compatibility = match;
                            index = jn;
                            theChosenOne = j-&amp;gt;first;
                        }
                    }
                }
                taken[index] = true;
                if (i-&amp;gt;first == queryWoman) {
                    break;
                }
            }
            return theChosenOne;
        }
};
&lt;/code&gt;&lt;/pre&gt;</description><link>http://code-jedi.chintanghate.me/2014/11/30/matchmaking/</link><guid isPermaLink="false">42d8c9c0-ad89-4714-8b3f-6c6396e3864a</guid><category>TopCoder</category><dc:creator>Chintan Ghate</dc:creator><pubDate>Sun, 30 Nov 2014 07:37:33 GMT</pubDate></item><item><title>BettingMoney</title><description>&lt;p&gt;Used In:    SRM 191 &lt;br&gt;
Used As:    Division II Level One&lt;/p&gt;

&lt;h6 id="problemstatement"&gt;Problem Statement&lt;/h6&gt;

&lt;p&gt;You run a gambling business in which people place bets on the margin of victory in a football game. At the end of the day, the company would like to know what the day's net gain has been.&lt;/p&gt;

&lt;p&gt;Just as in any other betting system, people place certain amounts as their bets and if they guess correctly, they get their money back plus a pre-specified percentage of their bet; otherwise they lose the money they bet. &lt;/p&gt;

&lt;p&gt;You are given a int[], amounts, the ith element of which is the number of dollars people have placed on a victory margin of i (i = 0 refers to the first element). You are also given a int[], centsPerDollar, the ith element of which is the number of cents the company has to pay for every dollar the people bet on a victory margin of i, if the final outcome is a victory margin of i. Finally, you are given an int, finalResult, which is the final margin of victory. You have to determine what the net gain for the day was and return the amount in cents.&lt;/p&gt;

&lt;p&gt;For example, if amounts were {10,20,30}, it would mean that people placed $10 on a draw outcome, $20 on a victory margin of 1 and $30 on a victory margin of 2, and if centsPerDollar were {20,30,40}, it would mean the people would win 20 cents per dollar bet if the match were a draw, 30 cents per dollar if the victory margin were 1 and 40 cents per dollar if the victory margin were 2. &lt;/p&gt;

&lt;p&gt;Suppose the final result is a victory margin of 1 (i.e., finalResult = 1). Then the people who guessed the outcome as a margin of 0 or 2 were wrong and the company receives the amounts they bet, $10+$30. However, the people who guessed that the outcome would be a margin of 1 were correct, and they receive money from the company according to the amount they bet (20 dollars) and the pre-set payoff percentage (30 cents per dollar) . This amounts to 20*30 = 600 cents. Hence, the day's net gain is 40 dollars - 600 cents = 3400 cents. You should return 3400.&lt;/p&gt;

&lt;h6 id="definition"&gt;Definition&lt;/h6&gt;

&lt;p&gt;Class:    BettingMoney &lt;br&gt;
Method:    moneyMade &lt;br&gt;
Parameters:    int[], int[], int &lt;br&gt;
Returns:    int &lt;br&gt;
Method signature:    int moneyMade(int[] amounts, int[] centsPerDollar, int finalResult) &lt;br&gt;
(be sure your method is public)&lt;/p&gt;

&lt;h6 id="notes"&gt;Notes&lt;/h6&gt;

&lt;ul&gt;
&lt;li&gt;Keep in mind that it is not relevant which team wins. Only the margin of victory matters.&lt;/li&gt;
&lt;li&gt;A victory margin of 0 and a draw are the same thing.&lt;/li&gt;
&lt;li&gt;There are 100 cents in a dollar.&lt;/li&gt;
&lt;li&gt;If the company has to pay more than it receives, the day's net gain will be negative.&lt;/li&gt;
&lt;/ul&gt;

&lt;h6 id="constraints"&gt;Constraints&lt;/h6&gt;

&lt;ul&gt;
&lt;li&gt;amounts will contain between 1 and 50 elements, inclusive.&lt;/li&gt;
&lt;li&gt;centsPerDollar will contain the same number of elements as amounts.&lt;/li&gt;
&lt;li&gt;finalResult will be between 0 and n-1, inclusive, where n is the number of elements in amounts.&lt;/li&gt;
&lt;li&gt;Each element of amounts will be between 0 and 5000, inclusive.&lt;/li&gt;
&lt;li&gt;Each element of centsPerDollar will be between 0 and 5000, inclusive.&lt;/li&gt;
&lt;/ul&gt;

&lt;h6 id="examples"&gt;Examples&lt;/h6&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;{10,20,30} &lt;br&gt;
{20,30,40}
1 &lt;br&gt;
Returns: 3400 &lt;br&gt;
The case explained in the problem statement above.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;{200,300,100} &lt;br&gt;
{10,10,10}
2 &lt;br&gt;
Returns: 49000 &lt;br&gt;
The company gains 200+300 = 500 dollars from the people who bet on margins of 0 and 1. The company loses 100*10 = 1000 cents to the people who bet on a victory margin of 2. Hence, the net gain is 49000 cents.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;{100,100,100,100} &lt;br&gt;
{5,5,5,5}
0 &lt;br&gt;
Returns: 29500&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;{5000,5000} &lt;br&gt;
{100,2}
0 &lt;br&gt;
Returns: 0&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;{100} &lt;br&gt;
{10}
0 &lt;br&gt;
Returns: -1000 &lt;br&gt;
The company doesn't gain anything! It has to pay the people who bet on the only outcome possible. It pays 100*10 cents. Hence, the net gain is -1000. (Negative indicates loss.)&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;hr&gt;

&lt;pre&gt;&lt;code class="prettyprint"&gt;#include &amp;lt;iostream&amp;gt;
#include &amp;lt;vector&amp;gt;

using namespace std;

class BettingMoney {  
    public:
        int moneyMade(vector&amp;lt;int&amp;gt; amounts, vector&amp;lt;int&amp;gt; centsPerDollar, int finalResult) {
            int profit = 0;
            for (int i = 0; i &amp;lt; amounts.size(); ++i) {
                if (i == finalResult) {
                    profit -= (amounts[i] * centsPerDollar[i]);
                } else {
                    profit += (amounts[i] * 100);
                }
            }
            return profit;
        }
};
&lt;/code&gt;&lt;/pre&gt;</description><link>http://code-jedi.chintanghate.me/2014/11/30/bettingname/</link><guid isPermaLink="false">99b30a41-e004-409d-a143-0e90ec6c8f90</guid><category>TopCoder</category><dc:creator>Chintan Ghate</dc:creator><pubDate>Sun, 30 Nov 2014 05:18:42 GMT</pubDate></item><item><title>UserName</title><description>&lt;p&gt;Used In:    SRM 203 &lt;br&gt;
Used As:    Division II Level One&lt;/p&gt;

&lt;h6 id="problemstatement"&gt;Problem Statement&lt;/h6&gt;

&lt;p&gt;You are implementing the member registration system of an online dating site. When a new member signs up, it is possible that she initially chooses the same username as an existing member. The system must then inform the new member of the conflict and suggest a variant of the chosen name with a number attached to the end.&lt;/p&gt;

&lt;p&gt;If an existing member is named "FunkyMonkey", for example, and a new member wants the same username, the simplest suggestion the system can make is "FunkyMonkey1". If there is already a member by that name, the system must suggest "FunkyMonkey2", unless that variant is also taken. If all names from "FunkyMonkey1" through "FunkyMonkey9" are taken as well as the original "FunkyMonkey", the system moves on to consider "FunkyMonkey10", and so on. The goal is to use the smallest possible number in the variant. Note that each username consists of letters (the characters from 'a' to 'z' and from 'A' to 'Z') and numerals ('0' to '9').&lt;/p&gt;

&lt;p&gt;You are given a String[], existingNames, containing all usernames that have already been registered in the system. You are also given a single String, newName, containing the username that a new member wants to use. In the event of a conflict, this member will accept the suggestion offered by your system in accordance with the principles above. Return a String containing the username finally assigned to the new member.&lt;/p&gt;

&lt;h6 id="definition"&gt;Definition&lt;/h6&gt;

&lt;p&gt;Class:    UserName &lt;br&gt;
Method:    newMember &lt;br&gt;
Parameters:    String[], String &lt;br&gt;
Returns:    String &lt;br&gt;
Method signature:    String newMember(String[] existingNames, String newName) &lt;br&gt;
(be sure your method is public)&lt;/p&gt;

&lt;h6 id="notes"&gt;Notes&lt;/h6&gt;

&lt;ul&gt;
&lt;li&gt;The constraints rule out names that end in a number with a leading zero, such as "grokster006" and "bart0".&lt;/li&gt;
&lt;/ul&gt;

&lt;h6 id="constraints"&gt;Constraints&lt;/h6&gt;

&lt;ul&gt;
&lt;li&gt;existingNames contains between 1 and 50 elements, inclusive&lt;/li&gt;
&lt;li&gt;each element of existingNames is between 1 and 50 characters long, inclusive&lt;/li&gt;
&lt;li&gt;the only characters permitted in elements of existingNames are 'a' to 'z', 'A' to 'Z', and '0' to '9'&lt;/li&gt;
&lt;li&gt;no element of existingNames ends in a number that has a leading zero&lt;/li&gt;
&lt;li&gt;newName is between 1 and 50 characters long, inclusive&lt;/li&gt;
&lt;li&gt;the only characters permitted in newName are 'a' to 'z' and 'A' to 'Z'&lt;/li&gt;
&lt;/ul&gt;

&lt;h6 id="examples"&gt;Examples&lt;/h6&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;{"MasterOfDisaster", "DingBat", "Orpheus", "WolfMan", "MrKnowItAll"} &lt;br&gt;
"TygerTyger"
Returns: "TygerTyger" &lt;br&gt;
"TygerTyger" is available.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;{"MasterOfDisaster", "TygerTyger1", "DingBat", "Orpheus", &lt;br&gt;
"TygerTyger", "WolfMan", "MrKnowItAll"}
"TygerTyger"
Returns: "TygerTyger2" &lt;br&gt;
"TygerTyger" and "TygerTyger1" are taken.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;{"TygerTyger2000", "TygerTyger1", "MasterDisaster", "DingBat", &lt;br&gt;
"Orpheus", "WolfMan", "MrKnowItAll"}
"TygerTyger"
Returns: "TygerTyger" &lt;br&gt;
There are higher-numbered variants of "TygerTyger", but the base name is available.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;{"grokster2", "BrownEyedBoy", "Yoop", "BlueEyedGirl", &lt;br&gt;
"grokster", "Elemental", "NightShade", "Grokster1"}
"grokster"
Returns: "grokster1" &lt;br&gt;
Note that "Grokster1" is not the same as "grokster1".&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;{"Bart4", "Bart5", "Bart6", "Bart7", "Bart8", "Bart9", "Bart10", &lt;br&gt;
"Lisa", "Marge", "Homer", "Bart", "Bart1", "Bart2", "Bart3",
"Bart11", "Bart12"}
"Bart"
Returns: "Bart13"&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;hr&gt;

&lt;pre&gt;&lt;code class="prettyprint"&gt;#include &amp;lt;iostream&amp;gt;
#include &amp;lt;string&amp;gt;
#include &amp;lt;vector&amp;gt;
#include &amp;lt;algorithm&amp;gt;
#include &amp;lt;sstream&amp;gt;

using namespace std;

class UserName {  
    private:
        string intToString(int n) {
            ostringstream oss;
            oss &amp;lt;&amp;lt; n;
            return oss.str();
        }
    public:
        string newMember(vector&amp;lt;string&amp;gt; existingNames, string newName) {
            if (find(existingNames.begin(), existingNames.end(), 
               newName) == existingNames.end()) {
                return newName;
            }
            int i = 1;
            while (find(existingNames.begin(), existingNames.end(), 
            newName + intToString(i++)) != existingNames.end());
            return newName + intToString(--i);
        }   
};
&lt;/code&gt;&lt;/pre&gt;</description><link>http://code-jedi.chintanghate.me/2014/11/30/username/</link><guid isPermaLink="false">be1ed185-8877-42a7-9d89-8f80236c99b0</guid><category>TopCoder</category><dc:creator>Chintan Ghate</dc:creator><pubDate>Sun, 30 Nov 2014 04:18:37 GMT</pubDate></item><item><title>PIGBANK</title><description>&lt;p&gt;Before ACM can do anything, a budget must be prepared and the necessary financial support obtained. The main income for this action comes from Irreversibly Bound Money (IBM). The idea behind is simple. Whenever some ACM member has any small money, he takes all the coins and throws them into a piggy-bank. You know that this process is irreversible, the coins cannot be removed without breaking the pig. After a sufficiently long time, there should be enough cash in the piggy-bank to pay everything that needs to be paid.&lt;/p&gt;

&lt;p&gt;But there is a big problem with piggy-banks. It is not possible to determine how much money is inside. So we might break the pig into pieces only to find out that there is not enough money. Clearly, we want to avoid this unpleasant situation. The only possibility is to weigh the piggy-bank and try to guess how many coins are inside. Assume that we are able to determine the weight of the pig exactly and that we know the weights of all coins of a given currency. Then there is some minimum amount of money in the piggy-bank that we can guarantee. Your task is to find out this worst case and determine the minimum amount of cash inside the piggy-bank. We need your help. No more prematurely broken pigs!&lt;/p&gt;

&lt;h6 id="input"&gt;Input&lt;/h6&gt;

&lt;p&gt;The input consists of T test cases. The number of them (T) is given on the first line of the input file. Each test case begins with a line containing two integers E and F. They indicate the weight of an empty pig and of the pig filled with coins. Both weights are given in grams. No pig will weigh more than 10 kg, that means 1 &amp;lt;= E &amp;lt;= F &amp;lt;= 10000. On the second line of each test case, there is an integer number N (1 &amp;lt;= N &amp;lt;= 500) that gives the number of various coins used in the given currency. Following this are exactly N lines, each specifying one coin type. These lines contain two integers each, Pand W (1 &amp;lt;= P &amp;lt;= 50000, 1 &amp;lt;= W &amp;lt;=10000). P is the value of the coin in monetary units, W is it's weight in grams.&lt;/p&gt;

&lt;h6 id="output"&gt;Output&lt;/h6&gt;

&lt;p&gt;Print exactly one line of output for each test case. The line must contain the sentence "The minimum amount of money in the piggy-bank is X." where X is the minimum amount of money that can be achieved using coins with the given total weight. If the weight cannot be reached exactly, print a line "This is impossible.".&lt;/p&gt;

&lt;p&gt;Example&lt;/p&gt;

&lt;p&gt;Input: &lt;br&gt;
3 &lt;br&gt;
10 110 &lt;br&gt;
2 &lt;br&gt;
1 1 &lt;br&gt;
30 50 &lt;br&gt;
10 110 &lt;br&gt;
2 &lt;br&gt;
1 1 &lt;br&gt;
50 30 &lt;br&gt;
1 6 &lt;br&gt;
2 &lt;br&gt;
10 3 &lt;br&gt;
20 4&lt;/p&gt;

&lt;p&gt;Output: &lt;br&gt;
The minimum amount of money in the piggy-bank is 60. &lt;br&gt;
The minimum amount of money in the piggy-bank is 100. &lt;br&gt;
This is impossible.&lt;/p&gt;

&lt;hr&gt;

&lt;pre&gt;&lt;code class="prettyprint"&gt;#include &amp;lt;iostream&amp;gt;
#include &amp;lt;vector&amp;gt;

using namespace std;

int main() {  
    int T;
    cin &amp;gt;&amp;gt; T;
    for (;T--;) {
        int E,F;
        cin &amp;gt;&amp;gt; E &amp;gt;&amp;gt; F;
        F -= E;
        vector&amp;lt;int&amp;gt; dp(F + 1, 100000000);
        int N;
        cin &amp;gt;&amp;gt; N;
        for (int i = 0; i &amp;lt; N; ++i) {
            int p, w;
            cin &amp;gt;&amp;gt; p &amp;gt;&amp;gt; w;
            if (dp[w] &amp;gt; p) {
                dp[w] = p;
                for (int j = 1; j &amp;lt;= F - w; ++j) {
                    if(dp[j + w] &amp;gt; dp[j] + dp[w]) {
                        dp[j + w] = dp[j] + dp[w];
                    }
                }
            }
        }
        if(dp[F] &amp;lt; 100000000) {
            cout &amp;lt;&amp;lt; "The minimum amount of money in the piggy-bank is " &amp;lt;&amp;lt; dp[F] &amp;lt;&amp;lt; ".\n";
        } else {
            cout &amp;lt;&amp;lt; "This is impossible.\n";
        }
    }
    return 0;
}
&lt;/code&gt;&lt;/pre&gt;</description><link>http://code-jedi.chintanghate.me/2014/11/29/pigbank/</link><guid isPermaLink="false">44f5c2a6-ccfd-484d-b43f-343a3c927f1e</guid><category>SPOJ</category><dc:creator>Chintan Ghate</dc:creator><pubDate>Sat, 29 Nov 2014 13:08:54 GMT</pubDate></item><item><title>PARTY</title><description>&lt;p&gt;You just received another bill which you cannot pay because you lack the money. Unfortunately, this is not the first time to happen, and now you decide to investigate the cause of your constant monetary shortness. The reason is quite obvious: the lion's share of your money routinely disappears at the entrance of party localities. &lt;/p&gt;

&lt;p&gt;You make up your mind to solve the problem where it arises, namely at the parties themselves. You introduce a limit for your party budget and try to have the most possible fun with regard to this limit. &lt;/p&gt;

&lt;p&gt;You inquire beforehand about the entrance fee to each party and estimate how much fun you might have there. The list is readily compiled, but how do you actually pick the parties that give you the most fun and do not exceed your budget? &lt;/p&gt;

&lt;p&gt;Write a program which finds this optimal set of parties that offer the most fun. Keep in mind that your budget need not necessarily be reached exactly. Achieve the highest possible fun level, and do not spend more money than is absolutely necessary.&lt;/p&gt;

&lt;h6 id="input"&gt;Input&lt;/h6&gt;

&lt;p&gt;The first line of the input specifies your party budget and the number n of parties. &lt;/p&gt;

&lt;p&gt;The following n lines contain two numbers each. The first number indicates the entrance fee of each party. Parties cost between 5 and 25 francs. The second number indicates the amount of fun of each party, given as an integer number ranging from 0 to 10. &lt;/p&gt;

&lt;p&gt;The budget will not exceed 500 and there will be at most 100 parties. All numbers are separated by a single space. &lt;/p&gt;

&lt;p&gt;There are many test cases. Input ends with 0 0.&lt;/p&gt;

&lt;h6 id="output"&gt;Output&lt;/h6&gt;

&lt;p&gt;For each test case your program must output the sum of the entrance fees and the sum of all fun values of an optimal solution. Both numbers must be separated by a single space.&lt;/p&gt;

&lt;p&gt;Example&lt;/p&gt;

&lt;p&gt;Input: &lt;br&gt;
50 10 &lt;br&gt;
12 3 &lt;br&gt;
15 8 &lt;br&gt;
16 9 &lt;br&gt;
16 6 &lt;br&gt;
10 2 &lt;br&gt;
21 9 &lt;br&gt;
18 4 &lt;br&gt;
12 4 &lt;br&gt;
17 8 &lt;br&gt;
18 9 &lt;/p&gt;

&lt;p&gt;50 10 &lt;br&gt;
13 8 &lt;br&gt;
19 10 &lt;br&gt;
16 8 &lt;br&gt;
12 9 &lt;br&gt;
10 2 &lt;br&gt;
12 8 &lt;br&gt;
13 5 &lt;br&gt;
15 5 &lt;br&gt;
11 7 &lt;br&gt;
16 2&lt;/p&gt;

&lt;p&gt;0 0&lt;/p&gt;

&lt;p&gt;Output: &lt;br&gt;
49 26 &lt;br&gt;
48 32&lt;/p&gt;

&lt;hr&gt;

&lt;pre&gt;&lt;code class="prettyprint"&gt;#include &amp;lt;iostream&amp;gt;
#include &amp;lt;vector&amp;gt;

using namespace std;

pair&amp;lt;int, int&amp;gt; knapSack(int b, vector&amp;lt;int&amp;gt; budget, vector&amp;lt;int&amp;gt; fun) {  
    int n = budget.size();
    vector&amp;lt;vector&amp;lt;int&amp;gt; &amp;gt; k(n + 1, vector&amp;lt;int&amp;gt; (b + 1));
    for (int i = 0; i &amp;lt;= n; ++i) {
        for (int j = 0; j &amp;lt;= b; ++j) {
            if (i == 0 || j == 0) {
                k[i][j] = 0;
            } else if ((budget[i - 1] &amp;lt;= j) &amp;amp;&amp;amp; (fun[i - 1] + k[i - 1][j - budget[i - 1]]) &amp;gt; k[i - 1][j]) {
                k[i][j] = fun[i - 1] + k[i - 1][j - budget[i - 1]];
            } else {
                k[i][j] = k[i - 1][j];
            }
        }
    }
    int ans = 0;
    for (int i = 0; i &amp;lt;= b; ++i) {
        if (k[n][i] == k[n][b]) {
            ans = i;
            break;
        }
    }
    return make_pair(ans, k[n][b]);
}

int main() {  
    int b, p;
    while ((cin &amp;gt;&amp;gt; b &amp;gt;&amp;gt; p) &amp;amp;&amp;amp; !(b == 0 &amp;amp;&amp;amp; p == 0)) {
        vector&amp;lt;int&amp;gt; budget(p),
                    fun(p);
        for (int i = 0; i &amp;lt; p; ++i) {
            cin &amp;gt;&amp;gt; budget[i] &amp;gt;&amp;gt; fun[i];
        }
        pair&amp;lt;int, int&amp;gt; ans = knapSack(b, budget, fun);
        cout &amp;lt;&amp;lt; ans.first &amp;lt;&amp;lt; " " &amp;lt;&amp;lt; ans.second &amp;lt;&amp;lt; "\n";
    } 
    return 0;
}
&lt;/code&gt;&lt;/pre&gt;</description><link>http://code-jedi.chintanghate.me/2014/11/29/party/</link><guid isPermaLink="false">1efbd2f9-8f70-4162-bc1e-79717acbe02e</guid><category>SPOJ</category><dc:creator>Chintan Ghate</dc:creator><pubDate>Sat, 29 Nov 2014 11:37:15 GMT</pubDate></item><item><title>CRDS</title><description>&lt;p&gt;Maricruz have a lot of cards, she always uses her cards to build pyramids as shown in the following image:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://code-jedi.chintanghate.me/content/images/2014/11/francky-cards.png" alt="Cards"&gt;&lt;/p&gt;

&lt;p&gt;A pyramid card of 3 levels. &lt;br&gt;
She always wonder how many cards does she need to make a pyramid card of N levels. Your task is to answer that question.&lt;/p&gt;

&lt;h6 id="input"&gt;Input&lt;/h6&gt;

&lt;p&gt;The first line of the input contains an integer 1&amp;lt;= T &amp;lt;= 1,000. Each of the following T lines will have an integer 1&amp;lt;= N &amp;lt;= 1,000,000.&lt;/p&gt;

&lt;h6 id="output"&gt;Output&lt;/h6&gt;

&lt;p&gt;For each case, output a single line consisting of the number of cards needed to build a pyramid card of level N modulo 1,000,007.&lt;/p&gt;

&lt;p&gt;Example&lt;/p&gt;

&lt;p&gt;Input: &lt;br&gt;
2 &lt;br&gt;
3 &lt;br&gt;
7&lt;/p&gt;

&lt;p&gt;Output: &lt;br&gt;
15 &lt;br&gt;
77&lt;/p&gt;

&lt;hr&gt;

&lt;pre&gt;&lt;code class="prettyprint"&gt;#include &amp;lt;iostream&amp;gt;

using namespace std;

int main() {  
    int T;
    cin &amp;gt;&amp;gt; T;
    for (;T--;) {
        unsigned long long levels;
        cin &amp;gt;&amp;gt; levels;
        unsigned long long cards = 
        (((levels * (levels + 1) / 2) * 3) - levels);
        cout &amp;lt;&amp;lt; cards % 1000007 &amp;lt;&amp;lt; "\n";
    }
    return 0;
}
&lt;/code&gt;&lt;/pre&gt;</description><link>http://code-jedi.chintanghate.me/2014/11/28/crds/</link><guid isPermaLink="false">80d9e6f9-0109-4490-a9b5-32d931259a55</guid><category>SPOJ</category><dc:creator>Chintan Ghate</dc:creator><pubDate>Fri, 28 Nov 2014 17:25:46 GMT</pubDate></item><item><title>EGYPIZZA</title><description>&lt;p&gt;Abotrika is having a party because his team won the african cup so he is inviting his friends to eat some pizza. Unfortunately, Abotrika's friends can't eat an entire pizza but all of them know exactly how much pizza they can eat and insist on getting the exact amount of pizza but Abotrika eats one complete pizza and all of them wants his amount of pizza in one slice.&lt;/p&gt;

&lt;p&gt;Their requests break down to three different pizza slices-either one quarter or a half or three quarters of pizza. write a program that will help Abotrika to find out what is the minimal number of pizzas he has to order so that everyone gets exact amount of pizza they want.&lt;/p&gt;

&lt;h6 id="input"&gt;Input&lt;/h6&gt;

&lt;p&gt;First line contains an integer N, 0&amp;lt;=N&amp;lt;=10000, number of friends. In each of next N lines there is amount of pizza that each of Abotrika's friends wants to eat,that is the fraction 1/4, 1/2 or 3/4.&lt;/p&gt;

&lt;h6 id="output"&gt;Output&lt;/h6&gt;

&lt;p&gt;In the first and only line you should write the minimal number of pizzas Abotrika has order don't forget to order one complete pizza for Abotrika&lt;/p&gt;

&lt;p&gt;Example&lt;/p&gt;

&lt;p&gt;Input: &lt;br&gt;
3 &lt;br&gt;
1/2 &lt;br&gt;
3/4 &lt;br&gt;
3/4&lt;/p&gt;

&lt;p&gt;Output: &lt;br&gt;
4&lt;/p&gt;

&lt;p&gt;Input: &lt;br&gt;
5 &lt;br&gt;
1/2 &lt;br&gt;
3/4 &lt;br&gt;
1/2 &lt;br&gt;
1/4 &lt;br&gt;
1/4&lt;/p&gt;

&lt;p&gt;Output: &lt;br&gt;
4&lt;/p&gt;

&lt;hr&gt;

&lt;pre&gt;&lt;code class="prettyprint"&gt;#include &amp;lt;iostream&amp;gt;
#include &amp;lt;string&amp;gt;

using namespace std;

int main() {  
    int N;
    cin &amp;gt;&amp;gt; N;
    long long a = 1,
              q = 0,
              h = 0,
              t = 0;
    for (;N--;) {
        string s;
        cin &amp;gt;&amp;gt; s;
        if (s == "1/2") {
            ++h;
        } else if (s == "3/4") {
            ++t;
        } else {
            ++q;
        }
    }
    a += h / 2;
    a += (h % 2);
    if (h % 2 == 1) {
        q -= 2;
    }
    if (t &amp;gt;= q) {
        a += t;
    } else {
        a += t;
        q -= t;
        a += q/4;
        a += (q % 4 &amp;gt; 0 ? 1 : 0);
    }
    cout &amp;lt;&amp;lt; a &amp;lt;&amp;lt; "\n";
    return 0;
}
&lt;/code&gt;&lt;/pre&gt;</description><link>http://code-jedi.chintanghate.me/2014/11/28/egypizza/</link><guid isPermaLink="false">848e8203-7cb7-4208-8e48-e6956466548d</guid><category>SPOJ</category><dc:creator>Chintan Ghate</dc:creator><pubDate>Fri, 28 Nov 2014 15:38:00 GMT</pubDate></item><item><title>OLOLOL</title><description>&lt;p&gt;Onotole has a lot of pyani. Each pyani has a number, writing on it. Pyanis with equal numbers are indistinguishable. Onotole knows everything, so, he knows that each pyani appeared twice, and only one pyani is unique. He wants to get вздръжни эффект, and he needs the unique pyani. Given the list of pyanis denote which one of them appeared once (it is guaranteed that other pyanis appeared twice).&lt;/p&gt;

&lt;h6 id="input"&gt;Input&lt;/h6&gt;

&lt;p&gt;First line of input contains number of pyanis N&amp;lt;=500 000. Next N lines contain a single positive integer 1 &amp;lt;= Pi &amp;lt;= 10^9.&lt;/p&gt;

&lt;h6 id="output"&gt;Output&lt;/h6&gt;

&lt;p&gt;Output one positive integer on pyani, which appeared once.&lt;/p&gt;

&lt;p&gt;Example&lt;/p&gt;

&lt;p&gt;Input: &lt;br&gt;
3 &lt;br&gt;
1 &lt;br&gt;
8 &lt;br&gt;
1&lt;/p&gt;

&lt;p&gt;Output: &lt;br&gt;
8&lt;/p&gt;

&lt;p&gt;Onotole has found not optimal AC algorithms, so all solutions will be rejudged. He is watching you.&lt;/p&gt;

&lt;hr&gt;

&lt;pre&gt;&lt;code class="prettyprint"&gt;#include &amp;lt;iostream&amp;gt;

using namespace std;

int main() {  
    int n;
    scanf("%d",&amp;amp;n);
    long long x, res = 0;
    for (;n--;) {
        scanf("%lld",&amp;amp;x);
        res ^= x;
    }
    cout &amp;lt;&amp;lt; res &amp;lt;&amp;lt; "\n";
    return 0;
}
&lt;/code&gt;&lt;/pre&gt;</description><link>http://code-jedi.chintanghate.me/2014/11/28/ololol/</link><guid isPermaLink="false">d8be6bbf-e8dd-4d91-b1b3-1098c55c5425</guid><category>SPOJ</category><dc:creator>Chintan Ghate</dc:creator><pubDate>Fri, 28 Nov 2014 13:18:27 GMT</pubDate></item><item><title>HYPNOS</title><description>&lt;p&gt;The process of “breaking” an integer is defined as summing the squares of its digits. For example, the result of breaking the integer 125 is (12 + 22 + 52) = 30. An integer N is happy if after “breaking” it repeatedly the result reaches 1. If the result never reaches 1 no matter how many times the “breaking” is repeated, then N is not a happy number.&lt;/p&gt;

&lt;h6 id="task"&gt;Task&lt;/h6&gt;

&lt;p&gt;Write a program that given an integer N, determines whether it is a happy number or not.&lt;/p&gt;

&lt;h6 id="constraints"&gt;Constraints&lt;/h6&gt;

&lt;p&gt;2 ≤ N ≤ 2,147,483,647&lt;/p&gt;

&lt;h6 id="input"&gt;Input&lt;/h6&gt;

&lt;p&gt;A single line containing a single integer N.&lt;/p&gt;

&lt;h6 id="output"&gt;Output&lt;/h6&gt;

&lt;p&gt;A single line containing a single integer T which is the number of times the process had to be done to determine that N is happy, or -1 if N is not happy.&lt;/p&gt;

&lt;p&gt;Example&lt;/p&gt;

&lt;p&gt;Input: &lt;br&gt;
19&lt;/p&gt;

&lt;p&gt;Output: &lt;br&gt;
4&lt;/p&gt;

&lt;p&gt;1) 19   : 12 + 92 = 82 &lt;br&gt;
2) 82   : 82 + 22 = 68 &lt;br&gt;
3) 68   : 62 + 82 = 100 &lt;br&gt;
4) 100 : 12 + 02 + 02 = 1&lt;/p&gt;

&lt;p&gt;The solution is 4 because we discovered that the integer 19 is happy after we repeated the process 4 &lt;br&gt;
times.&lt;/p&gt;

&lt;p&gt;Example&lt;/p&gt;

&lt;p&gt;Input: &lt;br&gt;
204&lt;/p&gt;

&lt;p&gt;Output: &lt;br&gt;
-1&lt;/p&gt;

&lt;p&gt;204 –&gt; 20 –&gt; 4 –&gt; 16 –&gt; 37 –&gt; 58 –&gt; 89 –&gt; 145 –&gt; 42 –&gt; 20 –&gt; 4 –&gt; 16 –&gt; 37 –&gt; 58 –&gt; 89 –&gt; 145 ……..&lt;/p&gt;

&lt;p&gt;204 is not a happy number because after breaking it several times the results start repeating so we can deduce that if we continue breaking it, the result will never reach 1.&lt;/p&gt;

&lt;p&gt;Number of test cases is 32.&lt;/p&gt;

&lt;hr&gt;

&lt;pre&gt;&lt;code class="prettyprint"&gt;#include &amp;lt;iostream&amp;gt;
#include &amp;lt;set&amp;gt;

using namespace std;

typedef long long ll;

ll breakNumber(ll N) {  
    ll res = 0;
    while (N != 0) {
        int n = N % 10;
        res += (n * n);
        N /= 10;
    }
    return res;
}

int main() {  
    int N;
    cin &amp;gt;&amp;gt; N;
    set&amp;lt;ll&amp;gt; pows;
    pows.insert(N);
    ll count = 0;
    while (N != 1) {
        N = breakNumber(N);
        if (pows.find(N) != pows.end()) {
            count = -1;
            break;
        } else {
            pows.insert(N);
            ++count;
        }
    }
    cout &amp;lt;&amp;lt; count &amp;lt;&amp;lt; "\n";
    return 0;
}
&lt;/code&gt;&lt;/pre&gt;</description><link>http://code-jedi.chintanghate.me/2014/11/28/hypnos/</link><guid isPermaLink="false">cb4b527e-e33c-4e14-b403-967f3a1b9757</guid><category>SPOJ</category><dc:creator>Chintan Ghate</dc:creator><pubDate>Fri, 28 Nov 2014 13:09:53 GMT</pubDate></item><item><title>BITMAP</title><description>&lt;p&gt;There is given a rectangular bitmap of size n*m. Each pixel of the bitmap is either white or black, but at least one is white. The pixel in i-th line and j-th column is called the pixel (i,j). The distance between two pixels p1=(i1,j1) and p2=(i2,j2) is defined as:&lt;/p&gt;

&lt;p&gt;d(p1,p2)=|i1-i2|+|j1-j2|.&lt;/p&gt;

&lt;h6 id="task"&gt;Task&lt;/h6&gt;

&lt;p&gt;Write a program which:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;reads the description of the bitmap from the standard input,&lt;/li&gt;
&lt;li&gt;for each pixel, computes the distance to the nearest white pixel,&lt;/li&gt;
&lt;li&gt;writes the results to the standard output.&lt;/li&gt;
&lt;/ul&gt;

&lt;h6 id="input"&gt;Input&lt;/h6&gt;

&lt;p&gt;The number of test cases t is in the first line of input, then t test cases follow separated by an empty line. In the first line of each test case there is a pair of integer numbers n, m separated by a single space, 1&amp;lt;=n &amp;lt;=182, 1&amp;lt;=m&amp;lt;=182. In each of the following n lines of the test case exactly one zero-one word of length m, the description of one line of the bitmap, is written. On the j-th position in the line (i+1), 1 &amp;lt;= i &amp;lt;= n, 1 &amp;lt;= j &amp;lt;= m, is '1' if, and only if the pixel (i,j) is white.&lt;/p&gt;

&lt;h6 id="output"&gt;Output&lt;/h6&gt;

&lt;p&gt;In the i-th line for each test case, 1&amp;lt;=i&amp;lt;=n, there should be written m integers f(i,1),...,f(i,m) separated by single spaces, where f(i,j) is the distance from the pixel (i,j) to the nearest white pixel.&lt;/p&gt;

&lt;p&gt;Example&lt;/p&gt;

&lt;p&gt;Input: &lt;br&gt;
1 &lt;br&gt;
3 4 &lt;br&gt;
0001 &lt;br&gt;
0011 &lt;br&gt;
0110&lt;/p&gt;

&lt;p&gt;Output: &lt;br&gt;
3 2 1 0 &lt;br&gt;
2 1 0 0 &lt;br&gt;
1 0 0 1&lt;/p&gt;

&lt;hr&gt;

&lt;pre&gt;&lt;code class="prettyprint"&gt;#include &amp;lt;iostream&amp;gt;
#include &amp;lt;string&amp;gt;
#include &amp;lt;vector&amp;gt;

using namespace std;

void bfs(vector&amp;lt;vector&amp;lt;int&amp;gt; &amp;gt; &amp;amp;dist, int x, int y, int d) {  
    int n = dist.size(),
        m = dist[0].size();
    if (x &amp;gt;= 0 &amp;amp;&amp;amp; x &amp;lt; n &amp;amp;&amp;amp; y &amp;gt;= 0 &amp;amp;&amp;amp; y &amp;lt; m &amp;amp;&amp;amp; dist[x][y] &amp;gt; d) {
        dist[x][y] = d;
        bfs(dist, x + 1, y, d + 1);
        bfs(dist, x - 1, y, d + 1);
        bfs(dist, x, y + 1, d + 1);
        bfs(dist, x, y - 1, d + 1);
    }
    return;
}

int main() {  
    int T;
    cin &amp;gt;&amp;gt; T;
    for (;T--;) {
        int n, m;
        cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; m;
        vector&amp;lt;string&amp;gt; grid(n);
        vector&amp;lt;vector&amp;lt;int&amp;gt; &amp;gt; dist(n, vector&amp;lt;int&amp;gt; (m, 400));
        for (int i = 0; i &amp;lt; n; ++i) {
            cin &amp;gt;&amp;gt; grid[i];
        }
        for (int i = 0; i &amp;lt; n; ++i) {
            for (int j = 0; j &amp;lt; m; ++j) {
                if (grid[i][j] == '1') {
                    bfs(dist, i, j, 0);
                }
            }
        }
        for (int i = 0; i &amp;lt; n; ++i) {
            for (int j = 0; j &amp;lt; m; ++j) {
                cout &amp;lt;&amp;lt; dist[i][j] &amp;lt;&amp;lt; " ";
            }
            cout &amp;lt;&amp;lt; "\n";
        }
    }
    return 0;
}
&lt;/code&gt;&lt;/pre&gt;</description><link>http://code-jedi.chintanghate.me/2014/11/28/bitmap/</link><guid isPermaLink="false">09df0738-8c1b-4b87-8029-6ae6968f1869</guid><category>SPOJ</category><dc:creator>Chintan Ghate</dc:creator><pubDate>Fri, 28 Nov 2014 04:07:25 GMT</pubDate></item><item><title>ACODE</title><description>&lt;p&gt;Alice and Bob need to send secret messages to each other and are discussing ways to encode their messages:  &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Alice: “Let’s just use a very simple code: We’ll assign ‘A’ the code word 1, ‘B’ will be 2, and so on down to ‘Z’ being assigned 26.”

Bob: “That’s a stupid code, Alice. Suppose I send you the word ‘BEAN’ encoded as 25114. You could decode that in many different ways!”

Alice: “Sure you could, but what words would you get? Other than ‘BEAN’, you’d get ‘BEAAD’, ‘YAAD’, ‘YAN’, ‘YKD’ and ‘BEKD’. I think you would be able to figure out the correct decoding. And why would you send me the word ‘BEAN’ anyway?”

Bob: “OK, maybe that’s a bad example, but I bet you that if you got a string of length 5000 there would be tons of different decodings and with that many you would find at least two different ones that would make sense.”

Alice: “How many different decodings?”

Bob: “Jillions!”  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For some reason, Alice is still unconvinced by Bob’s argument, so she requires a program that will determine how many decodings there can be for a given string using her code.&lt;/p&gt;

&lt;h6 id="input"&gt;Input&lt;/h6&gt;

&lt;p&gt;Input will consist of multiple input sets. Each set will consist of a single line of at most 5000 digits representing a valid encryption (for example, no line will begin with a 0). There will be no spaces between the digits. An input line of ‘0’ will terminate the input and should not be processed.&lt;/p&gt;

&lt;h6 id="output"&gt;Output&lt;/h6&gt;

&lt;p&gt;For each input set, output the number of possible decodings for the input string. All answers will be within the range of a 64 bit signed integer.&lt;/p&gt;

&lt;p&gt;Example&lt;/p&gt;

&lt;p&gt;Input: &lt;br&gt;
25114 &lt;br&gt;
1111111111 &lt;br&gt;
3333333333 &lt;br&gt;
0&lt;/p&gt;

&lt;p&gt;Output: &lt;br&gt;
6 &lt;br&gt;
89 &lt;br&gt;
1&lt;/p&gt;

&lt;hr&gt;

&lt;h6 id="usingdynamicprogramming"&gt;Using Dynamic Programming:&lt;/h6&gt;

&lt;pre&gt;&lt;code class="prettyprint"&gt;#include &amp;lt;iostream&amp;gt;
#include &amp;lt;string&amp;gt;
#include &amp;lt;vector&amp;gt;

using namespace std;

int main() {  
    string s;
    while ((cin &amp;gt;&amp;gt; s) &amp;amp;&amp;amp; s != "0") {
        vector&amp;lt;int&amp;gt; ones(s.size(), 0),
                    tens(s.size(), 0),
                    ways(s.size(), 0);
        for (int i = 0; i &amp;lt; s.size(); ++i) {
            ones[i] = s[i] - '0';
        }
        for (int i = 1; i &amp;lt; s.size(); ++i) {
            tens[i] = 10 * ones[i - 1] + ones[i];
        }
        ways[0] = 1;
        if (s.size() &amp;gt; 1) {
            ways[1] = (ones[1] != 0 ? 1 : 0);
            if (tens[1] &amp;gt; 9 &amp;amp;&amp;amp; tens[1] &amp;lt; 27) {
                ++ways[1];
            }
            for (int i = 2; i &amp;lt; s.size(); ++i) {
                ways[i] = (ones[i] != 0 ? ways[i - 1] : 0);
                if (tens[i] &amp;gt; 9 &amp;amp;&amp;amp; tens[i] &amp;lt; 27) {
                    ways[i] += ways[i - 2];
                }
            }
        }
        cout &amp;lt;&amp;lt; ways.back() &amp;lt;&amp;lt; "\n";
    }
    return 0;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;hr&gt;

&lt;h6 id="using2variables"&gt;Using 2 variables:&lt;/h6&gt;

&lt;pre&gt;&lt;code class="prettyprint"&gt;#include &amp;lt;iostream&amp;gt;
#include &amp;lt;string&amp;gt;

using namespace std;

int main() {  
    string s;
    while ((cin &amp;gt;&amp;gt; s) &amp;amp;&amp;amp; s != "0") {
        int good = 1,
            bad = 0;
        for (int i = 1; i &amp;lt; s.size(); ++i) {
            int n = (10 * (s[i - 1] - '0') + (s[i] - '0'));
            if (s[i] == '0') {
                if (n &amp;gt;= 27) {
                    good = 0;
                    bad = 0;
                    break;
                }
                bad = good;
                good = 0; 
            } else if (n &amp;lt; 27 &amp;amp;&amp;amp; n &amp;gt; 9) {
                good += bad;
                bad = good - bad;
            } else {
                good += bad;
                bad = 0;
            }
        }
        cout &amp;lt;&amp;lt; good + bad &amp;lt;&amp;lt; "\n";
    }
    return 0;
}
&lt;/code&gt;&lt;/pre&gt;</description><link>http://code-jedi.chintanghate.me/2014/11/27/acode/</link><guid isPermaLink="false">66e0fc84-f274-4962-8e98-51a5c0ee2e29</guid><category>SPOJ</category><dc:creator>Chintan Ghate</dc:creator><pubDate>Thu, 27 Nov 2014 07:31:59 GMT</pubDate></item><item><title>MARBLES</title><description>&lt;p&gt;Hänschen dreams he is in a shop with an infinite amount of marbles. He is allowed to select n marbles. There are marbles of k different colors. From each color there are also infinitely many marbles. Hänschen wants to have at least one marble of each color, but still there are a lot of possibilities for his selection. In his effort to make a decision he wakes up. Now he asks you how many possibilites for his selection he would have had. Assume that marbles of equal color can't be distinguished, and the order of the marbles is irrelevant.&lt;/p&gt;

&lt;h6 id="input"&gt;Input&lt;/h6&gt;

&lt;p&gt;The first line of input contains a number T &amp;lt;= 100 that indicates the number of test cases to follow. Each test case consists of one line containing n and k, where n is the number of marbles Hänschen selects and k is the number of different colors of the marbles. You can assume that 1&amp;lt;=k&amp;lt;=n&amp;lt;=1000000.&lt;/p&gt;

&lt;h6 id="output"&gt;Output&lt;/h6&gt;

&lt;p&gt;For each test case print the number of possibilities that Hänschen would have had. You can assume that this number fits into a signed 64 bit integer.&lt;/p&gt;

&lt;p&gt;Example&lt;/p&gt;

&lt;p&gt;Input: &lt;br&gt;
2 &lt;br&gt;
10 10 &lt;br&gt;
30 7&lt;/p&gt;

&lt;p&gt;Output: &lt;br&gt;
1 &lt;br&gt;
475020&lt;/p&gt;

&lt;hr&gt;

&lt;pre&gt;&lt;code class="prettyprint"&gt;#include &amp;lt;iostream&amp;gt;
#include &amp;lt;algorithm&amp;gt;

using namespace std;

unsigned long long gcd(unsigned long long a, unsigned long long b) {  
    return (b == 0 ? a : gcd(b, a % b));
}

unsigned long long NCR(unsigned long long N, unsigned long long K) {  
    if(K &amp;gt; N) {
        return 0;
    }
    K = min(N - K, K);
    unsigned long long p = 1;
    for (unsigned long long i = 1; i &amp;lt;= K ; ++i) {
        unsigned long long g = gcd(p, i);
        p /= g;
        p *= (N - i + 1) / (i / g);
    }
    return p;
}

int main() {  
    int T;
    cin &amp;gt;&amp;gt; T;
    for (;T--;) {
        unsigned long long N, K;
        cin &amp;gt;&amp;gt; N &amp;gt;&amp;gt; K;
        --N, --K;
        cout &amp;lt;&amp;lt; NCR(N, K) &amp;lt;&amp;lt; "\n";
    }
    return 0;
}
&lt;/code&gt;&lt;/pre&gt;</description><link>http://code-jedi.chintanghate.me/2014/11/27/marbles/</link><guid isPermaLink="false">bea21dd8-92e3-4b40-a042-f2f4e9f409fd</guid><category>SPOJ</category><dc:creator>Chintan Ghate</dc:creator><pubDate>Thu, 27 Nov 2014 04:19:00 GMT</pubDate></item><item><title>BYTESM2</title><description>&lt;p&gt;One of the secret chambers in Hogwarts is full of philosopher’s stones. The floor of the chamber is covered by h × w square tiles, where there are h rows of tiles from front (first row) to back (last row) and w columns of tiles from left to right. Each tile has 1 to 100 stones on it. Harry has to grab as many philosopher’s stones as possible, subject to the following restrictions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;He starts by choosing any tile in the first row, and collects the philosopher’s stones on that tile. Then, he moves to a tile in the next row, collects the philosopher’s stones on the tile, and so on until he reaches the last row.&lt;/li&gt;
&lt;li&gt;When he moves from one tile to a tile in the next row, he can only move to the tile just below it or diagonally to the left or right.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Given the values of h and w, and the number of philosopher’s stones on each tile, write a program to compute the maximum possible number of philosopher’s stones Harry can grab in one single trip from the first row to the last row.&lt;/p&gt;

&lt;h6 id="input"&gt;Input&lt;/h6&gt;

&lt;p&gt;The first line consists of a single integer T, the number of test cases. In each of the test cases, the first line has two integers. The first integer h (1&amp;lt;=h&amp;lt;=100) is the number of rows of tiles on the floor. The second integer w (1&amp;lt;=w&amp;lt;=100) is the number of columns of tiles on the floor. Next, there are h lines of inputs. The ith line of these, specifies the number of philosopher’s stones in each tile of the ith row from the front. Each line has w integers, where each integer m (0&amp;lt;=m&amp;lt;=100) is the number of philosopher’s stones on that tile. The integers are separated by a space character.&lt;/p&gt;

&lt;h6 id="output"&gt;Output&lt;/h6&gt;

&lt;p&gt;The output should consist of T lines, (1&amp;lt;=T&amp;lt;=100), one for each test case. Each line consists of a single integer, which is the maximum possible number of philosopher’s stones Harry can grab, in one single trip from the first row to the last row for the corresponding test case.&lt;/p&gt;

&lt;p&gt;Example&lt;/p&gt;

&lt;p&gt;Input: &lt;br&gt;
1 &lt;br&gt;
6 5 &lt;br&gt;
3 1 7 4 2 &lt;br&gt;
2 1 3 1 1 &lt;br&gt;
1 2 2 1 8 &lt;br&gt;
2 2 1 5 3 &lt;br&gt;
2 1 4 4 4 &lt;br&gt;
5 2 7 5 1&lt;/p&gt;

&lt;p&gt;Output: &lt;br&gt;
32     &lt;/p&gt;

&lt;p&gt;//7+1+8+5+4+7=32&lt;/p&gt;

&lt;hr&gt;

&lt;pre&gt;&lt;code class="prettyprint"&gt;#include &amp;lt;iostream&amp;gt;
#include &amp;lt;vector&amp;gt;
#include &amp;lt;algorithm&amp;gt;

using namespace std;

int main() {  
    int T;
    cin &amp;gt;&amp;gt; T;
    for (;T--;) {
        int h, w;
        cin &amp;gt;&amp;gt; h &amp;gt;&amp;gt; w;
        vector&amp;lt;vector&amp;lt;int&amp;gt; &amp;gt; grid(h, vector&amp;lt;int&amp;gt;(w));
        for (int i = 0; i &amp;lt; h; ++i) {
            for (int j = 0; j &amp;lt; w; ++j) {
                cin &amp;gt;&amp;gt; grid[i][j];
            }
        }
        for (int i = h - 2; i &amp;gt;= 0; --i) {
            for (int j = 0; j &amp;lt; w; ++j) {
                int maximum = 0;
                if (j - 1 &amp;gt;= 0 &amp;amp;&amp;amp; grid[i + 1][j - 1] &amp;gt; maximum) {
                    maximum = grid[i + 1][j - 1];
                }
                if (grid[i + 1][j] &amp;gt; maximum) {
                    maximum = grid[i + 1][j];
                }
                if (j + 1 &amp;lt; w &amp;amp;&amp;amp; grid[i + 1][j + 1] &amp;gt; maximum) {
                    maximum = grid[i + 1][j + 1];
                }
                grid[i][j] += maximum;
            }
        }
        cout &amp;lt;&amp;lt; *max_element(grid[0].begin(), grid[0].end()) 
             &amp;lt;&amp;lt; "\n";
    }
    return 0;
}
&lt;/code&gt;&lt;/pre&gt;</description><link>http://code-jedi.chintanghate.me/2014/11/27/bytesm2/</link><guid isPermaLink="false">4ee19633-c9f6-4361-996d-71226822d994</guid><category>SPOJ</category><dc:creator>Chintan Ghate</dc:creator><pubDate>Wed, 26 Nov 2014 20:01:46 GMT</pubDate></item><item><title>JAVAC</title><description>&lt;p&gt;Apologists of Java and C++ can argue for hours proving each other that their programming language is the best one. Java people will tell that their programs are clearer and less prone to errors, while C++ people will laugh at their inability to instantiate an array of generics or tell them that their programs are slow and have long source code.&lt;/p&gt;

&lt;p&gt;Another issue that Java and C++ people could never agree on is identifier naming. In Java a multiword identifier is constructed in the following manner: the first word is written starting from the small letter, and the following ones are written starting from the capital letter, no separators are used. All other letters are small. Examples of a Java identifier are javaIdentifier, longAndMnemonicIdentifier, name, nEERC.&lt;/p&gt;

&lt;p&gt;Unlike them, C++ people use only small letters in their identifiers. To separate words they use underscore character ‘&lt;em&gt;’. Examples of C++ identifiers are c&lt;/em&gt;identifier, long&lt;em&gt;and&lt;/em&gt;mnemonic&lt;em&gt;identifier, name (you see that when there is just one word Java and C++ people agree), n&lt;/em&gt;e&lt;em&gt;e&lt;/em&gt;r_c.&lt;/p&gt;

&lt;p&gt;You are writing a translator that is intended to translate C++ programs to Java and vice versa. Of course, identifiers in the translated program must be formatted due to its language rules — otherwise people will never like your translator.&lt;/p&gt;

&lt;p&gt;The first thing you would like to write is an identifier translation routine. Given an identifier, it would detect whether it is Java identifier or C++ identifier and translate it to another dialect. If it is neither, then your routine should report an error. Translation must preserve the order of words and must only change the case of letters and/or add/remove underscores.&lt;/p&gt;

&lt;h6 id="input"&gt;Input&lt;/h6&gt;

&lt;p&gt;The input file consists of several lines that contains an identifier. It consists of letters of the English alphabet and underscores. Its length does not exceed 100.&lt;/p&gt;

&lt;h6 id="output"&gt;Output&lt;/h6&gt;

&lt;p&gt;If the input identifier is Java identifier, output its C++ version. If it is C++ identifier, output its Java version. If it is none, output 'Error!' instead.&lt;/p&gt;

&lt;p&gt;Example&lt;/p&gt;

&lt;p&gt;Input: &lt;br&gt;
long_and_mnemonic_identifier &lt;br&gt;
anotherExample &lt;br&gt;
i &lt;br&gt;
bad_Style&lt;/p&gt;

&lt;p&gt;Output: &lt;br&gt;
longAndMnemonicIdentifier &lt;br&gt;
another_example &lt;br&gt;
i &lt;br&gt;
Error!&lt;/p&gt;

&lt;hr&gt;

&lt;pre&gt;&lt;code class="prettyprint"&gt;#include &amp;lt;iostream&amp;gt;
#include &amp;lt;string&amp;gt;
#include &amp;lt;cctype&amp;gt;

using namespace std;

bool isJavaIdentifier(string s) {  
    if (!islower(s[0])) {
        return false;
    }
    for (int i = 0; i &amp;lt; s.size(); ++i) {
        if (!isalpha(s[i])) {
            return false;
        }
    }
    return true;
}

bool isCIdentifier(string s) {  
    if (!islower(s[0])) {
        return false;
    }
    for (int i = 0; i &amp;lt; s.size(); ++i) {
        if (!islower(s[i]) &amp;amp;&amp;amp; s[i] != '_') {
            return false;
        }
        if (s[i] == '_' &amp;amp;&amp;amp; !islower(s[i+1])) {
            return false;
        }
    }
    return true;
}

int main() {  
    string s;
    while (cin &amp;gt;&amp;gt; s) {
        bool java = isJavaIdentifier(s),
             c = isCIdentifier(s);
        if (!java &amp;amp;&amp;amp; !c) {
            cout &amp;lt;&amp;lt; "Error!\n";
        } else if (java) {
            string o = "";
            for (int i = 0; i &amp;lt; s.size(); ++i) {
                if (isupper(s[i])) {
                    o += '_';
                }
                o += tolower(s[i]);
            }
            cout &amp;lt;&amp;lt; o &amp;lt;&amp;lt; "\n";
        } else if (c) {
            string o = "";
            for (int i = 0; i &amp;lt; s.size(); ++i) {
                if (s[i] == '_') {
                    ++i;
                    o += toupper(s[i]);
                } else {
                    o += s[i];
                }
            }
            cout &amp;lt;&amp;lt; o &amp;lt;&amp;lt; "\n";
        }
    }
    return 0;
}
&lt;/code&gt;&lt;/pre&gt;</description><link>http://code-jedi.chintanghate.me/2014/11/27/javac/</link><guid isPermaLink="false">4077835d-1bca-4079-96f6-0e3e12e31991</guid><category>SPOJ</category><dc:creator>Chintan Ghate</dc:creator><pubDate>Wed, 26 Nov 2014 18:49:32 GMT</pubDate></item></channel></rss>