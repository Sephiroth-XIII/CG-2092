<rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Code Jedi</title><description>Code, algorithms and design.</description><link>http://code-jedi.chintanghate.me/</link><generator>Ghost 0.5</generator><lastBuildDate>Wed, 05 Nov 2014 05:04:30 GMT</lastBuildDate><atom:link href="http://code-jedi.chintanghate.me/rss/" rel="self" type="application/rss+xml"/><ttl>60</ttl><item><title>ACPC10A</title><description>&lt;p&gt;According to Wikipedia, an arithmetic progression (AP) is a sequence of numbers such that the difference of any two successive members of the sequence is a constant. For instance, the sequence 3, 5, 7, 9, 11, 13, . . . is an arithmetic progression with common difference 2. For this problem, we will limit ourselves to arithmetic progression whose common difference is a non-zero integer. &lt;br&gt;
On the other hand, a geometric progression (GP) is a sequence of numbers where each term after the first is found by multiplying the previous one by a fixed non-zero number called the common ratio. For example, the sequence 2, 6, 18, 54, . . . is a geometric progression with common ratio 3. For this problem, we will limit ourselves to geometric progression whose common ratio is a non-zero integer. &lt;br&gt;
Given three successive members of a sequence, you need to determine the type of the progression and the next successive member.&lt;/p&gt;

&lt;h6 id="input"&gt;Input&lt;/h6&gt;

&lt;p&gt;Your program will be tested on one or more test cases. Each case is specified on a single line with three integers (−10, 000 &amp;lt; a1 , a2 , a3 &amp;lt; 10, 000) where a1 , a2 , and a3 are distinct. &lt;br&gt;
The last case is followed by a line with three zeros.&lt;/p&gt;

&lt;h6 id="output"&gt;Output&lt;/h6&gt;

&lt;p&gt;For each test case, you program must print a single line of the form: &lt;br&gt;
XX v &lt;br&gt;
where XX is either AP or GP depending if the given progression is an Arithmetic or Geometric Progression. v is the next member of the given sequence. All input cases are guaranteed to be either an arithmetic or geometric progressions.&lt;/p&gt;

&lt;p&gt;Example&lt;/p&gt;

&lt;p&gt;Input: &lt;br&gt;
4 7 10 &lt;br&gt;
2 6 18 &lt;br&gt;
0 0 0&lt;/p&gt;

&lt;p&gt;Output: &lt;br&gt;
AP 13 &lt;br&gt;
GP 54&lt;/p&gt;

&lt;hr&gt;

&lt;pre&gt;&lt;code class="prettyprint"&gt;#include &amp;lt;iostream&amp;gt;

using namespace std;

int main() {  
    int a1, a2, a3;
    while ((cin &amp;gt;&amp;gt; a1 &amp;gt;&amp;gt; a2 &amp;gt;&amp;gt; a3) &amp;amp;&amp;amp; 
          !(a1 == 0 &amp;amp;&amp;amp; a2 == 0 &amp;amp;&amp;amp; a3 == 0)) {
        if (a3 - a2 == a2 - a1) {
            cout &amp;lt;&amp;lt; "AP " &amp;lt;&amp;lt; 2*a3 - a2 &amp;lt;&amp;lt; "\n"; 
        } else {
            cout &amp;lt;&amp;lt; "GP " &amp;lt;&amp;lt; a3*a3/a2 &amp;lt;&amp;lt; "\n";
        }
    }
    return 0;
}
&lt;/code&gt;&lt;/pre&gt;</description><link>http://code-jedi.chintanghate.me/acpc10a/</link><guid isPermaLink="false">080098dd-c125-47ba-8250-5d17052f185a</guid><category>SPOJ</category><dc:creator>Chintan Ghate</dc:creator><pubDate>Wed, 05 Nov 2014 04:59:48 GMT</pubDate></item><item><title>TOANDFRO</title><description>&lt;p&gt;Mo and Larry have devised a way of encrypting messages. They first decide secretly on the number of columns and write the message (letters only) down the columns, padding with extra random letters so as to make a rectangular array of letters. For example, if the message is “There’s no place like home on a snowy night” and there are five columns, Mo would write down  &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;t o i o y  
h p k n n  
e l e a i  
r a h s g  
e c o n h  
s e m o t  
n l e w x  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that Mo includes only letters and writes them all in lower case. In this example, Mo used the character ‘x’ to pad the message out to make a rectangle, although he could have used any letter. Mo then sends the message to Larry by writing the letters in each row, alternating left-to-right and right-to-left. So, the above would be encrypted as&lt;/p&gt;

&lt;p&gt;toioynnkpheleaigshareconhtomesnlewx&lt;/p&gt;

&lt;p&gt;Your job is to recover for Larry the original message (along with any extra padding letters) from the encrypted one.&lt;/p&gt;

&lt;h6 id="input"&gt;Input&lt;/h6&gt;

&lt;p&gt;There will be multiple input sets. Input for each set will consist of two lines. The first line will contain an integer in the range 2...20 indicating the number of columns used. The next line is a string of up to 200 lower case letters. The last input set is followed by a line containing a single 0, indicating end of input.&lt;/p&gt;

&lt;h6 id="output"&gt;Output&lt;/h6&gt;

&lt;p&gt;Each input set should generate one line of output, giving the original plaintext message, with no spaces.&lt;/p&gt;

&lt;p&gt;Example&lt;/p&gt;

&lt;p&gt;Input:&lt;/p&gt;

&lt;p&gt;5 &lt;br&gt;
toioynnkpheleaigshareconhtomesnlewx &lt;br&gt;
3 &lt;br&gt;
ttyohhieneesiaabss &lt;br&gt;
0&lt;/p&gt;

&lt;p&gt;Output:&lt;/p&gt;

&lt;p&gt;theresnoplacelikehomeonasnowynightx &lt;br&gt;
thisistheeasyoneab&lt;/p&gt;

&lt;hr&gt;

&lt;pre&gt;&lt;code class="prettyprint"&gt;#include &amp;lt;iostream&amp;gt;
#include &amp;lt;string&amp;gt;
#include &amp;lt;vector&amp;gt;

using namespace std;

int main() {  
    int N;
    while((cin &amp;gt;&amp;gt; N) &amp;amp;&amp;amp; N != 0) {
        string S;
        cin &amp;gt;&amp;gt; S;

        int M = S.size()/N;
        vector&amp;lt;vector&amp;lt;char&amp;gt; &amp;gt; grid(M, vector&amp;lt;char&amp;gt; (N));

        for (int i = 0, k = 0; i &amp;lt; M; ++i) {
            for (int j = 0; j &amp;lt; N; ++j) {
                if (i&amp;amp;1) {
                    grid[i][N-1-j] = S[k++];
                } else {
                    grid[i][j] = S[k++];
                }
            }
        }

        for (int i = 0; i &amp;lt; N; ++i) {
            for (int j = 0; j &amp;lt; M; ++j) {
                cout &amp;lt;&amp;lt; grid[j][i];
            }
        }

        cout &amp;lt;&amp;lt; "\n";
    }
    return 0;
}
&lt;/code&gt;&lt;/pre&gt;</description><link>http://code-jedi.chintanghate.me/toandfro/</link><guid isPermaLink="false">481707f0-2b22-4f46-840d-e3e6e32d28cd</guid><category>SPOJ</category><dc:creator>Chintan Ghate</dc:creator><pubDate>Wed, 05 Nov 2014 04:39:13 GMT</pubDate></item><item><title>SAMER08F</title><description>&lt;p&gt;Richard Phillips Feynman was a well known American physicist and a recipient of the Nobel Prize in Physics. He worked in theoretical physics and also pioneered the field of quantum computing. He visited South America for ten months, giving lectures and enjoying life in the tropics. He is also known for his books "Surely You're Joking, Mr. Feynman!" and "What Do You Care What Other People Think?", which include some of his adventures below the equator.&lt;/p&gt;

&lt;p&gt;His life-long addiction was solving and making puzzles, locks, and cyphers. Recently, an old farmer in South America, who was a host to the young physicist in 1949, found some papers and notes that is believed to have belonged to Feynman. Among notes about mesons and electromagnetism, there was a napkin where he wrote a simple puzzle: "how many different squares are there in a grid of N ×N squares?".&lt;/p&gt;

&lt;p&gt;In the same napkin there was a drawing which is reproduced below, showing that, for N=2, the answer is 5. &lt;/p&gt;

&lt;p&gt;&lt;img src="http://code-jedi.chintanghate.me/content/images/2014/11/disatoba-feynman.gif" alt="Illustration"&gt;&lt;/p&gt;

&lt;h6 id="input"&gt;Input&lt;/h6&gt;

&lt;p&gt;The input contains several test cases. Each test case is composed of a single line, containing only one integer N, representing the number of squares in each side of the grid (1 ≤ N ≤ 100).&lt;/p&gt;

&lt;p&gt;The end of input is indicated by a line containing only one zero.&lt;/p&gt;

&lt;h6 id="output"&gt;Output&lt;/h6&gt;

&lt;p&gt;For each test case in the input, your program must print a single line, containing the number of different squares for the corresponding input.&lt;/p&gt;

&lt;p&gt;Example&lt;/p&gt;

&lt;p&gt;Input: &lt;br&gt;
2 &lt;br&gt;
1 &lt;br&gt;
8 &lt;br&gt;
0&lt;/p&gt;

&lt;p&gt;Output: &lt;br&gt;
5 &lt;br&gt;
1 &lt;br&gt;
204&lt;/p&gt;

&lt;hr&gt;

&lt;pre&gt;&lt;code class="prettyprint"&gt;#include &amp;lt;iostream&amp;gt;
#include &amp;lt;vector&amp;gt;
#include &amp;lt;numeric&amp;gt;

using namespace std;

int main() {  
    vector&amp;lt;int&amp;gt; SQR(101, 0);
    for (int i = 0; i &amp;lt; 101; ++i) {
        SQR[i] = i*i;
    }

    int N;
    while((cin &amp;gt;&amp;gt; N) &amp;amp;&amp;amp; N != 0) {
        cout &amp;lt;&amp;lt; accumulate(SQR.begin(), SQR.begin()+N+1, 0) &amp;lt;&amp;lt; "\n";
    }
    return 0;
}
&lt;/code&gt;&lt;/pre&gt;</description><link>http://code-jedi.chintanghate.me/samer08f/</link><guid isPermaLink="false">f91be8f7-583b-49ae-a8da-411d7cbaaa52</guid><category>SPOJ</category><dc:creator>Chintan Ghate</dc:creator><pubDate>Wed, 05 Nov 2014 03:46:32 GMT</pubDate></item><item><title>NSTEPS</title><description>&lt;p&gt;Starting from point (0,0) on a plane, we have written all non-negative integers 0, 1, 2,... as shown in the figure. For example, 1, 2, and 3 has been written at points (1,1), (2,0), and (3, 1) respectively and this pattern has continued.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://code-jedi.chintanghate.me/content/images/2014/11/NSTEPS.png" alt="Illustration"&gt;&lt;/p&gt;

&lt;p&gt;You are to write a program that reads the coordinates of a point (x, y), and writes the number (if any) that has been written at that point. (x, y) coordinates in the input are in the range 0...10000.&lt;/p&gt;

&lt;h6 id="input"&gt;Input&lt;/h6&gt;

&lt;p&gt;The first line of the input is N, the number of test cases for this problem. In each of the N following lines, there is x, and y representing the coordinates (x, y) of a point.&lt;/p&gt;

&lt;h6 id="output"&gt;Output&lt;/h6&gt;

&lt;p&gt;For each point in the input, write the number written at that point or write No Number if there is none.&lt;/p&gt;

&lt;p&gt;Example&lt;/p&gt;

&lt;p&gt;Input: &lt;br&gt;
3 &lt;br&gt;
4 2 &lt;br&gt;
6 6 &lt;br&gt;
3 4&lt;/p&gt;

&lt;p&gt;Output: &lt;br&gt;
6 &lt;br&gt;
12 &lt;br&gt;
No Number&lt;/p&gt;

&lt;hr&gt;

&lt;pre&gt;&lt;code class="prettyprint"&gt;#include &amp;lt;iostream&amp;gt;

using namespace std;

int main() {  
    int T;
    cin &amp;gt;&amp;gt; T;

    for(;T--;) {
        int x, y;
        cin &amp;gt;&amp;gt; x &amp;gt;&amp;gt; y;

        if (x == y || x - y == 2) {
            if (x&amp;amp;1) {
                cout &amp;lt;&amp;lt; x + y - 1 &amp;lt;&amp;lt; "\n";
            } else {
                cout &amp;lt;&amp;lt; x + y &amp;lt;&amp;lt; "\n";
            }
        } else {
            cout &amp;lt;&amp;lt; "No Number\n";
        }
    }
    return 0;
}
&lt;/code&gt;&lt;/pre&gt;</description><link>http://code-jedi.chintanghate.me/nsteps/</link><guid isPermaLink="false">98054c18-b6ee-47d8-9175-75403a49b3b3</guid><category>SPOJ</category><dc:creator>Chintan Ghate</dc:creator><pubDate>Wed, 05 Nov 2014 03:13:01 GMT</pubDate></item><item><title>ONP</title><description>&lt;p&gt;Transform the algebraic expression with brackets into RPN form (Reverse Polish Notation). Two-argument operators: +, -, &lt;em&gt;, /, ^ (priority from the lowest to the highest), brackets ( ). Operands: only letters: a,b,...,z. Assume that there is only one RPN form (no expressions like a&lt;/em&gt;b*c).&lt;/p&gt;

&lt;h6 id="input"&gt;Input&lt;/h6&gt;

&lt;p&gt;t [the number of expressions &amp;lt;= 100] &lt;br&gt;
expression [length &amp;lt;= 400] &lt;br&gt;
[other expressions]
Text grouped in [ ] does not appear in the input file.&lt;/p&gt;

&lt;h6 id="output"&gt;Output&lt;/h6&gt;

&lt;p&gt;The expressions in RPN form, one per line.&lt;/p&gt;

&lt;p&gt;Example&lt;/p&gt;

&lt;p&gt;Input: &lt;br&gt;
3 &lt;br&gt;
(a+(b&lt;em&gt;c))
((a+b)&lt;/em&gt;(z+x))
((a+t)*((b+(a+c))^(c+d)))&lt;/p&gt;

&lt;p&gt;Output: &lt;br&gt;
abc&lt;em&gt;+ &lt;br&gt;
ab+zx+&lt;/em&gt; &lt;br&gt;
at+bac++cd+^*&lt;/p&gt;

&lt;hr&gt;

&lt;pre&gt;&lt;code class="prettyprint"&gt;#include &amp;lt;iostream&amp;gt;
#include &amp;lt;stack&amp;gt;
#include &amp;lt;string&amp;gt;

using namespace std;

int main() {  
    int T;
    cin &amp;gt;&amp;gt; T;

    for(;T--;) {
        string e;
        cin &amp;gt;&amp;gt; e;
        stack&amp;lt;char&amp;gt; op; 
        for (int i = 0; i &amp;lt; e.size(); ++i) {
            if (e[i] &amp;gt;= 'a' &amp;amp;&amp;amp; e[i] &amp;lt;= 'z') {
                cout &amp;lt;&amp;lt; e[i];
            } else if (e[i] !='(' &amp;amp;&amp;amp; e[i] != ')') {
                op.push(e[i]);
            } else if (e[i] == ')') {
                cout &amp;lt;&amp;lt; op.top();
                op.pop();
            }
        }
        cout &amp;lt;&amp;lt; "\n";
    }
    return 0;
}
&lt;/code&gt;&lt;/pre&gt;</description><link>http://code-jedi.chintanghate.me/onp/</link><guid isPermaLink="false">f0d1db0a-dbd4-4bf0-b4ed-5bf14d10b9e3</guid><category>SPOJ</category><dc:creator>Chintan Ghate</dc:creator><pubDate>Tue, 04 Nov 2014 13:31:10 GMT</pubDate></item><item><title>FCTRL2</title><description>&lt;p&gt;You are asked to calculate factorials of some small positive integers.&lt;/p&gt;

&lt;h6 id="input"&gt;Input&lt;/h6&gt;

&lt;p&gt;An integer t, 1&amp;lt;=t&amp;lt;=100, denoting the number of testcases, followed by t lines, each containing a single integer n, 1&amp;lt;=n&amp;lt;=100.&lt;/p&gt;

&lt;h6 id="output"&gt;Output&lt;/h6&gt;

&lt;p&gt;For each integer n given at input, display a line with the value of n!&lt;/p&gt;

&lt;p&gt;Example&lt;/p&gt;

&lt;p&gt;Sample input: &lt;br&gt;
4 &lt;br&gt;
1 &lt;br&gt;
2 &lt;br&gt;
5 &lt;br&gt;
3&lt;/p&gt;

&lt;p&gt;Sample output: &lt;br&gt;
1 &lt;br&gt;
2 &lt;br&gt;
120 &lt;br&gt;
6&lt;/p&gt;

&lt;hr&gt;

&lt;pre&gt;&lt;code class="prettyprint"&gt;#include &amp;lt;iostream&amp;gt;
#include &amp;lt;vector&amp;gt;

using namespace std;

int main() {  
    vector&amp;lt;vector&amp;lt;int&amp;gt; &amp;gt; FACT(101,vector&amp;lt;int&amp;gt;(200,0));
    FACT[0][0] = 1;

    for (int i = 1; i &amp;lt;= 100; ++i) {
        for (int j = 0; j &amp;lt; 199; ++j) {
            FACT[i][j] += FACT[i-1][j]*i;
            FACT[i][j+1] = FACT[i][j]/10;
            FACT[i][j] %= 10;
        }
    }

    int T;
    cin &amp;gt;&amp;gt; T;

    for (;T--;) {
        int N;
        cin &amp;gt;&amp;gt; N;

        bool flag = false;
        for (int i = 199; i &amp;gt;= 0; --i) {
            if (!flag &amp;amp;&amp;amp; FACT[N][i] == 0) {
                continue;
            } else {
                flag = true;
                cout &amp;lt;&amp;lt; FACT[N][i];
            }
        }
        cout &amp;lt;&amp;lt; "\n";
    }
    return 0;
}
&lt;/code&gt;&lt;/pre&gt;</description><link>http://code-jedi.chintanghate.me/fctr2/</link><guid isPermaLink="false">a50f1e5d-f0f0-4c67-984b-85757786536e</guid><category>SPOJ</category><dc:creator>Chintan Ghate</dc:creator><pubDate>Tue, 04 Nov 2014 13:18:27 GMT</pubDate></item><item><title>FCTRL</title><description>&lt;p&gt;The most important part of a GSM network is so called Base Transceiver Station (BTS). These transceivers form the areas called cells (this term gave the name to the cellular phone) and every phone connects to the BTS with the strongest signal (in a little simplified view). Of course, BTSes need some attention and technicians need to check their function periodically.&lt;/p&gt;

&lt;p&gt;ACM technicians faced a very interesting problem recently. Given a set of BTSes to visit, they needed to find the shortest path to visit all of the given points and return back to the central company building. Programmers have spent several months studying this problem but with no results. They were unable to find the solution fast enough. After a long time, one of the programmers found this problem in a conference article. Unfortunately, he found that the problem is so called "Travelling Salesman Problem" and it is very hard to solve. If we have N BTSes to be visited, we can visit them in any order, giving us N! possibilities to examine. The function expressing that number is called factorial and can be computed as a product 1.2.3.4....N. The number is very high even for a relatively small N.&lt;/p&gt;

&lt;p&gt;The programmers understood they had no chance to solve the problem. But because they have already received the research grant from the government, they needed to continue with their studies and produce at least some results. So they started to study behaviour of the factorial function.&lt;/p&gt;

&lt;p&gt;For example, they defined the function Z. For any positive integer N, Z(N) is the number of zeros at the end of the decimal form of number N!. They noticed that this function never decreases. If we have two numbers N1&amp;lt;N2, then Z(N1) &amp;lt;= Z(N2). It is because we can never "lose" any trailing zero by multiplying by any positive number. We can only get new and new zeros. The function Z is very interesting, so we need a computer program that can determine its value efficiently.&lt;/p&gt;

&lt;h6 id="input"&gt;Input&lt;/h6&gt;

&lt;p&gt;There is a single positive integer T on the first line of input (equal to about 100000). It stands for the number of numbers to follow. Then there are T lines, each containing exactly one positive integer number N, 1 &amp;lt;= N &amp;lt;= 1000000000.&lt;/p&gt;

&lt;h6 id="output"&gt;Output&lt;/h6&gt;

&lt;p&gt;For every number N, output a single line containing the single non-negative integer Z(N).&lt;/p&gt;

&lt;p&gt;Example&lt;/p&gt;

&lt;p&gt;Sample Input: &lt;br&gt;
6 &lt;br&gt;
3 &lt;br&gt;
60 &lt;br&gt;
100 &lt;br&gt;
1024 &lt;br&gt;
23456 &lt;br&gt;
8735373&lt;/p&gt;

&lt;p&gt;Sample Output: &lt;br&gt;
0 &lt;br&gt;
14 &lt;br&gt;
24 &lt;br&gt;
253 &lt;br&gt;
5861 &lt;br&gt;
2183837&lt;/p&gt;

&lt;hr&gt;

&lt;pre&gt;&lt;code class="prettyprint"&gt;#include &amp;lt;iostream&amp;gt;
#include &amp;lt;cmath&amp;gt;

using namespace std;

int main() {  
    int T;
    cin &amp;gt;&amp;gt; T;

    for (;T--;) {
        int N, S = 0;
        cin &amp;gt;&amp;gt; N;

        int i = 1;
        while(N/pow(5,i) &amp;gt; 0) {
            S += N/pow(5,i++);
        }
        cout &amp;lt;&amp;lt; S &amp;lt;&amp;lt; "\n";
    }
    return 0;
}
&lt;/code&gt;&lt;/pre&gt;</description><link>http://code-jedi.chintanghate.me/fctrl/</link><guid isPermaLink="false">0f6efc29-dc81-4ecf-ab8b-0c6a683e6ce2</guid><category>SPOJ</category><dc:creator>Chintan Ghate</dc:creator><pubDate>Tue, 04 Nov 2014 12:37:09 GMT</pubDate></item><item><title>ADDREV</title><description>&lt;p&gt;The Antique Comedians of Malidinesia prefer comedies to tragedies. Unfortunately, most of the ancient plays are tragedies. Therefore the dramatic advisor of ACM has decided to transfigure some tragedies into comedies. Obviously, this work is very hard because the basic sense of the play must be kept intact, although all the things change to their opposites. For example the numbers: if any number appears in the tragedy, it must be converted to its reversed form before being accepted into the comedy play.&lt;/p&gt;

&lt;p&gt;Reversed number is a number written in arabic numerals but the order of digits is reversed. The first digit becomes last and vice versa. For example, if the main hero had 1245 strawberries in the tragedy, he has 5421 of them now. Note that all the leading zeros are omitted. That means if the number ends with a zero, the zero is lost by reversing (e.g. 1200 gives 21). Also note that the reversed number never has any trailing zeros.&lt;/p&gt;

&lt;p&gt;ACM needs to calculate with reversed numbers. Your task is to add two reversed numbers and output their reversed sum. Of course, the result is not unique because any particular number is a reversed form of several numbers (e.g. 21 could be 12, 120 or 1200 before reversing). Thus we must assume that no zeros were lost by reversing (e.g. assume that the original number was 12).&lt;/p&gt;

&lt;h6 id="input"&gt;Input&lt;/h6&gt;

&lt;p&gt;The input consists of N cases (equal to about 10000). The first line of the input contains only positive integer N. Then follow the cases. Each case consists of exactly one line with two positive integers separated by space. These are the reversed numbers you are to add.&lt;/p&gt;

&lt;h6 id="output"&gt;Output&lt;/h6&gt;

&lt;p&gt;For each case, print exactly one line containing only one integer - the reversed sum of two reversed numbers. Omit any leading zeros in the output.&lt;/p&gt;

&lt;p&gt;Example&lt;/p&gt;

&lt;p&gt;Sample input: &lt;br&gt;
3 &lt;br&gt;
24 1 &lt;br&gt;
4358 754 &lt;br&gt;
305 794&lt;/p&gt;

&lt;p&gt;Sample output: &lt;br&gt;
34 &lt;br&gt;
1998 &lt;br&gt;
1&lt;/p&gt;

&lt;hr&gt;

&lt;pre&gt;&lt;code class="prettyprint"&gt;#include &amp;lt;iostream&amp;gt;
#include &amp;lt;string&amp;gt;
#include &amp;lt;sstream&amp;gt;
#include &amp;lt;algorithm&amp;gt;

using namespace std;

int revadd(string a, string b) {  
    int x, y, z, ans;
    istringstream iss(a);
    iss &amp;gt;&amp;gt; x;
    istringstream iss1(b);
    iss1 &amp;gt;&amp;gt; y;
    z = x + y;
    ostringstream oss;
    oss &amp;lt;&amp;lt; z;
    string c = oss.str();
    reverse(c.begin(), c.end());
    istringstream iss3(c);
    iss3 &amp;gt;&amp;gt; ans;
    return ans;
}

int main() {  
    int N;
    cin &amp;gt;&amp;gt; N;

    for(;N--;) {
        string a, b;
        cin &amp;gt;&amp;gt; a &amp;gt;&amp;gt; b;
        reverse(a.begin(), a.end());
        reverse(b.begin(), b.end());
        cout &amp;lt;&amp;lt; revadd(a, b) &amp;lt;&amp;lt; "\n";
    }
    return 0;
}
&lt;/code&gt;&lt;/pre&gt;</description><link>http://code-jedi.chintanghate.me/addrev/</link><guid isPermaLink="false">72ca342b-56d7-4657-98d4-1769dc74c7c0</guid><category>SPOJ</category><dc:creator>Chintan Ghate</dc:creator><pubDate>Tue, 04 Nov 2014 08:06:56 GMT</pubDate></item><item><title>SBSTR1</title><description>&lt;p&gt;Given two binary strings, A (of length 10) and B (of length 5), output 1 if B is a substring of A and 0 otherwise.&lt;/p&gt;

&lt;h6 id="input"&gt;Input&lt;/h6&gt;

&lt;p&gt;24 lines consisting of pairs of binary strings A and B separated by a single space.&lt;/p&gt;

&lt;h6 id="output"&gt;Output&lt;/h6&gt;

&lt;p&gt;The logical value of: 'B is a substring of A'.&lt;/p&gt;

&lt;p&gt;Example&lt;/p&gt;

&lt;p&gt;First two lines of input: &lt;br&gt;
1010110010 10110 &lt;br&gt;
1110111011 10011&lt;/p&gt;

&lt;p&gt;First two lines of output: &lt;br&gt;
1 &lt;br&gt;
0&lt;/p&gt;

&lt;hr&gt;

&lt;pre&gt;&lt;code class="prettyprint"&gt;#include &amp;lt;iostream&amp;gt;    
#include &amp;lt;string&amp;gt;

using namespace std;

int main() {  
    for (int i = 0; i &amp;lt; 24; ++i) {
        string a, b;
        cin &amp;gt;&amp;gt; a &amp;gt;&amp;gt; b;
        if (a.find(b) == string::npos) {
            cout &amp;lt;&amp;lt; "0\n";
        } else {
                cout &amp;lt;&amp;lt; "1\n";
        }
    }
    return 0;
}
&lt;/code&gt;&lt;/pre&gt;</description><link>http://code-jedi.chintanghate.me/sbstr1/</link><guid isPermaLink="false">bab76c32-6583-45f4-b3c7-8a507a28fe5e</guid><category>SPOJ</category><dc:creator>Chintan Ghate</dc:creator><pubDate>Mon, 03 Nov 2014 23:32:59 GMT</pubDate></item><item><title>PRIME1</title><description>&lt;p&gt;Peter wants to generate some prime numbers for his cryptosystem. Help him! Your task is to generate all prime numbers between two given numbers!&lt;/p&gt;

&lt;h6 id="input"&gt;Input&lt;/h6&gt;

&lt;p&gt;The input begins with the number t of test cases in a single line (t&amp;lt;=10). In each of the next t lines there are two numbers m and n (1 &amp;lt;= m &amp;lt;= n &amp;lt;= 1000000000, n-m&amp;lt;=100000) separated by a space.&lt;/p&gt;

&lt;h6 id="output"&gt;Output&lt;/h6&gt;

&lt;p&gt;For every test case print all prime numbers p such that m &amp;lt;= p &amp;lt;= n, one number per line, test cases separated by an empty line.&lt;/p&gt;

&lt;p&gt;Example&lt;/p&gt;

&lt;p&gt;Input: &lt;br&gt;
2 &lt;br&gt;
1 10 &lt;br&gt;
3 5&lt;/p&gt;

&lt;p&gt;Output: &lt;br&gt;
2 &lt;br&gt;
3 &lt;br&gt;
5 &lt;br&gt;
7&lt;/p&gt;

&lt;p&gt;3 &lt;br&gt;
5&lt;/p&gt;

&lt;hr&gt;

&lt;pre&gt;&lt;code class="prettyprint"&gt;#include &amp;lt;iostream&amp;gt;
#include &amp;lt;cmath&amp;gt;

using namespace std;

int main() {  
    int T;
    cin &amp;gt;&amp;gt; T;

    for(;T--;) {
        int a, b;
        cin &amp;gt;&amp;gt; a &amp;gt;&amp;gt; b;

        for (int i = a; i &amp;lt;= b; ++i) {
            if (i == 2) {
                printf("%d\n",i);
            }
            if (i%2 != 0 &amp;amp;&amp;amp; i != 1) {
                bool flag = true;
                for (int j = 3; j &amp;lt;= sqrt(i); j+=2) {
                    if(i%j == 0) {
                        flag = false;
                        break;
                    }
                }
                if (flag) {
                    printf("%d\n",i);
                }
            }
        }
        printf("\n");
    }
    return 0;
}
&lt;/code&gt;&lt;/pre&gt;</description><link>http://code-jedi.chintanghate.me/prime1/</link><guid isPermaLink="false">cd4ed102-9475-4ce2-b3a9-25987645d009</guid><category>SPOJ</category><dc:creator>Chintan Ghate</dc:creator><pubDate>Mon, 03 Nov 2014 23:25:33 GMT</pubDate></item><item><title>TEST</title><description>&lt;p&gt;Your program is to use the brute-force approach in order to find the Answer to Life, the Universe, and Everything. More precisely... rewrite small numbers from input to output. Stop processing input after reading in the number 42. All numbers at input are integers of one or two digits.&lt;/p&gt;

&lt;p&gt;Example&lt;/p&gt;

&lt;p&gt;Input: &lt;br&gt;
1 &lt;br&gt;
2 &lt;br&gt;
88 &lt;br&gt;
42 &lt;br&gt;
99&lt;/p&gt;

&lt;p&gt;Output: &lt;br&gt;
1 &lt;br&gt;
2 &lt;br&gt;
88&lt;/p&gt;

&lt;hr&gt;

&lt;pre&gt;&lt;code class="prettyprint"&gt;#include &amp;lt;iostream&amp;gt;

using namespace std;

int main() {  
    int n;
    while(cin &amp;gt;&amp;gt; n) {
        if(n != 42) {
            cout &amp;lt;&amp;lt; n &amp;lt;&amp;lt; "\n";
        } else { 
            break;
        }
    }
    return 0;
}
&lt;/code&gt;&lt;/pre&gt;</description><link>http://code-jedi.chintanghate.me/test/</link><guid isPermaLink="false">f2321372-ed41-4695-acad-597953ced016</guid><category>SPOJ</category><dc:creator>Chintan Ghate</dc:creator><pubDate>Mon, 03 Nov 2014 04:59:00 GMT</pubDate></item></channel></rss>