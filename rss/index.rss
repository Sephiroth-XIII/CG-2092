<rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Code Jedi</title><description>Code, algorithms and design.</description><link>http://code-jedi.chintanghate.me/</link><generator>Ghost 0.5</generator><lastBuildDate>Thu, 06 Nov 2014 18:00:49 GMT</lastBuildDate><atom:link href="http://code-jedi.chintanghate.me/rss/" rel="self" type="application/rss+xml"/><ttl>60</ttl><item><title>PALIN</title><description>&lt;p&gt;A positive integer is called a palindrome if its representation in the decimal system is the same when read from left to right and from right to left. For a given positive integer K of not more than 1,000,000 digits, write the value of the smallest palindrome larger than K to output. Numbers are always displayed without leading zeros.&lt;/p&gt;

&lt;h6 id="input"&gt;Input&lt;/h6&gt;

&lt;p&gt;The first line contains integer t, the number of test cases. Integers K are given in the next t lines.&lt;/p&gt;

&lt;h6 id="output"&gt;Output&lt;/h6&gt;

&lt;p&gt;For each K, output the smallest palindrome larger than K.&lt;/p&gt;

&lt;p&gt;Example&lt;/p&gt;

&lt;p&gt;Input: &lt;br&gt;
2 &lt;br&gt;
808 &lt;br&gt;
2133&lt;/p&gt;

&lt;p&gt;Output: &lt;br&gt;
818 &lt;br&gt;
2222&lt;/p&gt;

&lt;hr&gt;

&lt;pre&gt;&lt;code class="prettyprint"&gt;#include &amp;lt;iostream&amp;gt;
#include &amp;lt;string&amp;gt;
#include &amp;lt;algorithm&amp;gt;

using namespace std;

bool isPalindrome(string s) {  
    string s1 = s;
    reverse(s.begin(), s.end());
    return s == s1;
}

string palin(string s) {  
    string s1 = s;
    for (int i = 0; i &amp;lt; s.size()/2; ++i) {
        s[s.size() - i - 1] = s[i];
    }
    if (s &amp;gt; s1) {
        return s;
    } else {
        int carry = 0;
        int cur = 0;
        int n = s.size()/2 + (s.size()%2 - 1);
        for (int i = n; i &amp;gt;= 0; --i) {
            cur = s[i]-'0';
            if (i == n) {
                cur = cur + carry + 1;
            } else {
                cur += carry;
            }
            carry = cur / 10;
            cur %= 10;
            s[i] = char(cur+'0');
        }
        if(carry &amp;gt; 0) {
            s = char(carry+'0') + s;
        }
        for (int i = 0; i &amp;lt; s.size()/2; ++i) {
            s[s.size() - i - 1] = s[i];
        }
    }
    return s;
}

int main() {  
    int t;
    cin &amp;gt;&amp;gt; t;
    for (;t--;) {
        string K;
        cin &amp;gt;&amp;gt; K;
        cout &amp;lt;&amp;lt; palin(K) &amp;lt;&amp;lt; "\n";
    }    
    return 0;
}
&lt;/code&gt;&lt;/pre&gt;</description><link>http://code-jedi.chintanghate.me/2014/11/06/palin/</link><guid isPermaLink="false">7f08e0bb-34ab-449a-a4be-3595be29f26f</guid><category>SPOJ</category><dc:creator>Chintan Ghate</dc:creator><pubDate>Thu, 06 Nov 2014 16:50:48 GMT</pubDate></item><item><title>HANGOVER</title><description>&lt;p&gt;How far can you make a stack of cards overhang a table? If you have one card, you can create a maximum overhang of half a card length. (We're assuming that the cards must be perpendicular to the table.) With two cards you can make the top card overhang the bottom one by half a card length, and the bottom one overhang the table by a third of a card length, for a total maximum overhang of 1/2 + 1/3 = 5/6 card lengths. In general you can make n cards overhang by 1/2 + 1/3 + 1/4 + ... + 1/(n + 1) card lengths, where the top card overhangs the second by 1/2, the second overhangs tha third by 1/3, the third overhangs the fourth by 1/4, etc., and the bottom card overhangs the table by 1/(n + 1). This is illustrated in the figure below.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://code-jedi.chintanghate.me/content/images/2014/11/wanderley-hangover.jpg" alt="Figure"&gt;&lt;/p&gt;

&lt;h6 id="input"&gt;Input&lt;/h6&gt;

&lt;p&gt;The input consists of one or more test cases, followed by a line containing the number 0.00 that signals the end of the input. Each test case is a single line containing a positive floating-point number c whose value is at least 0.01 and at most 5.20; c will contain exactly three digits.&lt;/p&gt;

&lt;h6 id="output"&gt;Output&lt;/h6&gt;

&lt;p&gt;For each test case, output the minimum number of cards necessary to achieve an overhang of at least c card lengths. Use the exact output format shown in the examples.&lt;/p&gt;

&lt;p&gt;Example&lt;/p&gt;

&lt;p&gt;Input: &lt;br&gt;
1.00 &lt;br&gt;
3.71 &lt;br&gt;
0.04 &lt;br&gt;
5.19 &lt;br&gt;
0.00&lt;/p&gt;

&lt;p&gt;Output: &lt;br&gt;
3 card(s) &lt;br&gt;
61 card(s) &lt;br&gt;
1 card(s) &lt;br&gt;
273 card(s)&lt;/p&gt;

&lt;hr&gt;

&lt;pre&gt;&lt;code class="prettyprint"&gt;#include &amp;lt;iostream&amp;gt;

using namespace std;

int main() {  
    double c;
    while((cin &amp;gt;&amp;gt; c) &amp;amp;&amp;amp; c != 0.00) {
        double i = 2, t = 0;
        while (t &amp;lt; c) {
            t += 1.0/i;
            i += 1;
        }
        cout &amp;lt;&amp;lt; i-2 &amp;lt;&amp;lt; " card(s)\n";
    }
    return 0;
}
&lt;/code&gt;&lt;/pre&gt;</description><link>http://code-jedi.chintanghate.me/2014/11/06/hangover/</link><guid isPermaLink="false">827b0aef-e1ba-43e9-9868-e7e9f8a954af</guid><category>SPOJ</category><dc:creator>Chintan Ghate</dc:creator><pubDate>Thu, 06 Nov 2014 15:35:12 GMT</pubDate></item><item><title>EIGHTS</title><description>&lt;p&gt;Pattern Matchers have been designed for various sorts of patterns. Mr. HKP likes to observe patterns in numbers. After completing his extensive research on the squares of numbers, he has moved on to cubes. Now he wants to know all numbers whose cube ends in 888.&lt;/p&gt;

&lt;p&gt;Given a number k, help Mr. HKP find the kth number (indexed from 1) whose cube ends in 888.&lt;/p&gt;

&lt;h6 id="input"&gt;Input&lt;/h6&gt;

&lt;p&gt;The first line of the input contains an integer t, the number of test cases. t test cases follow.&lt;/p&gt;

&lt;p&gt;Each test case consists of a single line containing a single integer k (1 &amp;lt;= k &amp;lt;= 2,000,000,000,000).&lt;/p&gt;

&lt;h6 id="output"&gt;Output&lt;/h6&gt;

&lt;p&gt;For each test case, output a single integer which denotes the kth number whose cube ends in 888. The result will be less than 263.&lt;/p&gt;

&lt;p&gt;Example&lt;/p&gt;

&lt;p&gt;Input: &lt;br&gt;
1 &lt;br&gt;
1&lt;/p&gt;

&lt;p&gt;Output: &lt;br&gt;
192&lt;/p&gt;

&lt;hr&gt;

&lt;pre&gt;&lt;code class="prettyprint"&gt;#include &amp;lt;iostream&amp;gt;
#include &amp;lt;vector&amp;gt;

using namespace std;

int main() {  
    vector&amp;lt;int&amp;gt; pattern;
    pattern.push_back(192);
    pattern.push_back(442);
    pattern.push_back(692);
    pattern.push_back(942);

    int t;
    cin &amp;gt;&amp;gt; t;
    for(;t--;) {
        unsigned long long n;
        cin &amp;gt;&amp;gt; n;
        cout &amp;lt;&amp;lt; ((n - 1) / 4) * 1000 + pattern[(n - 1) % 4] &amp;lt;&amp;lt; "\n";
    }
    return 0;
}
&lt;/code&gt;&lt;/pre&gt;</description><link>http://code-jedi.chintanghate.me/2014/11/06/eights/</link><guid isPermaLink="false">cf52e075-2603-4adb-a28e-74ebc16e7fd5</guid><category>SPOJ</category><dc:creator>Chintan Ghate</dc:creator><pubDate>Thu, 06 Nov 2014 14:32:55 GMT</pubDate></item><item><title>COINS</title><description>&lt;p&gt;In Byteland they have a very strange monetary system.&lt;/p&gt;

&lt;p&gt;Each Bytelandian gold coin has an integer number written on it. A coin n can be exchanged in a bank into three coins: n/2, n/3 and n/4. But these numbers are all rounded down (the banks have to make a profit).&lt;/p&gt;

&lt;p&gt;You can also sell Bytelandian coins for American dollars. The exchange rate is 1:1. But you can not buy Bytelandian coins.&lt;/p&gt;

&lt;p&gt;You have one gold coin. What is the maximum amount of American dollars you can get for it?&lt;/p&gt;

&lt;h6 id="input"&gt;Input&lt;/h6&gt;

&lt;p&gt;The input will contain several test cases (not more than 10). Each testcase is a single line with a number n, 0 &amp;lt;= n &amp;lt;= 1,000,000,000. It is the number written on your coin.&lt;/p&gt;

&lt;h6 id="output"&gt;Output&lt;/h6&gt;

&lt;p&gt;For each test case output a single line, containing the maximum amount of American dollars you can make.&lt;/p&gt;

&lt;p&gt;Example&lt;/p&gt;

&lt;p&gt;Input: &lt;br&gt;
12 &lt;br&gt;
2&lt;/p&gt;

&lt;p&gt;Output: &lt;br&gt;
13 &lt;br&gt;
2&lt;/p&gt;

&lt;p&gt;You can change 12 into 6, 4 and 3, and then change these into $6+$4+$3 = $13. If you try changing the coin 2 into 3 smaller coins, you will get 1, 0 and 0, and later you can get no more than $1 out of them. It is better just to change the 2 coin directly into $2.&lt;/p&gt;

&lt;hr&gt;

&lt;pre&gt;&lt;code class="prettyprint"&gt;#include &amp;lt;iostream&amp;gt;
#include &amp;lt;deque&amp;gt;
#include &amp;lt;set&amp;gt;
#include &amp;lt;vector&amp;gt;

using namespace std;

int main() {

    vector&amp;lt;int&amp;gt; preCompute(1000001,0);

    for (int i = 0; i &amp;lt;= 1000000; ++i) {
        int divided = preCompute[i/2] + preCompute[i/3] + 
                      preCompute[i/4];
        if (divided &amp;gt; i) {
            preCompute[i] = divided;
        } else {
            preCompute[i] = i;
        }
    }

    int n;

    while (cin &amp;gt;&amp;gt; n) {
        deque&amp;lt;int&amp;gt; q;
        q.push_back(n);

        set&amp;lt;int&amp;gt; doNotDivide;
        long long total = 0;

        while(!q.empty()) {
            int x = q.front();

            if(x &amp;lt;= 1000000) {
                total += preCompute[x];
            } else if (doNotDivide.find(x) == doNotDivide.end() &amp;amp;&amp;amp; 
                      (x/2 + x/3 + x/4) &amp;gt;= x) {
                q.push_back(x/2);
                q.push_back(x/3);
                q.push_back(x/4);
            } else {
                total += x;
                doNotDivide.insert(x);
            }
            q.pop_front();
        }
        cout &amp;lt;&amp;lt; total &amp;lt;&amp;lt; "\n";
    }
    return 0;
}
&lt;/code&gt;&lt;/pre&gt;</description><link>http://code-jedi.chintanghate.me/2014/11/06/coins/</link><guid isPermaLink="false">05cf5cc6-7d69-4745-8939-b270443ea6a0</guid><category>SPOJ</category><dc:creator>Chintan Ghate</dc:creator><pubDate>Thu, 06 Nov 2014 04:52:37 GMT</pubDate></item><item><title>CANDY3</title><description>&lt;p&gt;A class went to a school trip. And, as usually, all N kids have got their backpacks stuffed with candy. But soon quarrels started all over the place, as some of the kids had more candies than others. Soon, the teacher realized that he has to step in: "Everybody, listen! Put all the candies you have on this table here!"&lt;/p&gt;

&lt;p&gt;Soon, there was quite a large heap of candies on the teacher's table. "Now, I will divide the candies into N equal heaps and everyone will get one of them." announced the teacher.&lt;/p&gt;

&lt;p&gt;"Wait, is this really possible?" wondered some of the smarter kids.&lt;/p&gt;

&lt;h6 id="problem"&gt;Problem&lt;/h6&gt;

&lt;p&gt;You are given the number of candies each child brought. Find out whether the teacher can divide the candies into N exactly equal heaps. (For the purpose of this task, all candies are of the same type.)&lt;/p&gt;

&lt;h6 id="input"&gt;Input&lt;/h6&gt;

&lt;p&gt;The first line of the input file contains an integer T specifying the number of test cases. Each test case is preceded by a blank line.&lt;/p&gt;

&lt;p&gt;Each test case looks as follows: The first line contains N : the number of children. Each of the next N lines contains the number of candies one child brought.&lt;/p&gt;

&lt;h6 id="output"&gt;Output&lt;/h6&gt;

&lt;p&gt;For each of the test cases output a single line with a single word "YES" if the candies can be distributed equally, or "NO" otherwise.&lt;/p&gt;

&lt;p&gt;Example&lt;/p&gt;

&lt;p&gt;Input: &lt;br&gt;
2&lt;/p&gt;

&lt;p&gt;5 &lt;br&gt;
5 &lt;br&gt;
2 &lt;br&gt;
7 &lt;br&gt;
3 &lt;br&gt;
8&lt;/p&gt;

&lt;p&gt;6 &lt;br&gt;
7 &lt;br&gt;
11 &lt;br&gt;
2 &lt;br&gt;
7 &lt;br&gt;
3 &lt;br&gt;
4&lt;/p&gt;

&lt;p&gt;Output: &lt;br&gt;
YES &lt;br&gt;
NO&lt;/p&gt;

&lt;hr&gt;

&lt;pre&gt;&lt;code class="prettyprint"&gt;#include &amp;lt;iostream&amp;gt;

using namespace std;

int main() {  
    int T;
    cin &amp;gt;&amp;gt; T;

    for(;T--;) {
        unsigned long long N;
        cin &amp;gt;&amp;gt; N;

        unsigned long long total = 0;
        for (int i = 0; i &amp;lt; N; ++i) {
            unsigned long long x;
            cin &amp;gt;&amp;gt; x;
            total = (total + x) % N;
        }

        if (total % N == 0) {
            cout &amp;lt;&amp;lt; "YES\n";
        } else {
            cout &amp;lt;&amp;lt; "NO\n";
        }
    }
    return 0;
}
&lt;/code&gt;&lt;/pre&gt;</description><link>http://code-jedi.chintanghate.me/2014/11/06/candy3/</link><guid isPermaLink="false">d18b1659-698e-42e5-9464-d401ed545110</guid><category>SPOJ</category><dc:creator>Chintan Ghate</dc:creator><pubDate>Thu, 06 Nov 2014 04:17:05 GMT</pubDate></item><item><title>AE00</title><description>&lt;p&gt;Byteman has a collection of N squares with side 1. How many different rectangles can he form using these squares?&lt;/p&gt;

&lt;p&gt;Two rectangles are considered different if none of them can be rotated and moved to obtain the second one. During rectangle construction, Byteman can neither deform the squares nor put any squares upon any other ones.&lt;/p&gt;

&lt;h6 id="input"&gt;Input&lt;/h6&gt;

&lt;p&gt;The first and only line of the standard input contains one integer N (1 ≤ N ≤ 10000).&lt;/p&gt;

&lt;h6 id="output"&gt;Output&lt;/h6&gt;

&lt;p&gt;The first and only line of the standard output should contain a single integer equal to the number of different rectangles that Byteman can form using his squares.&lt;/p&gt;

&lt;p&gt;Example&lt;/p&gt;

&lt;p&gt;Input: &lt;br&gt;
6&lt;/p&gt;

&lt;p&gt;Output: &lt;br&gt;
8&lt;/p&gt;

&lt;p&gt;&lt;img src="http://code-jedi.chintanghate.me/content/images/2014/11/ae00.jpg" alt="Illustration"&gt;&lt;/p&gt;

&lt;hr&gt;

&lt;pre&gt;&lt;code class="prettyprint"&gt;#include &amp;lt;iostream&amp;gt;
#include &amp;lt;cmath&amp;gt;

using namespace std;

int main() {  
    int N;
    cin &amp;gt;&amp;gt; N;

    int squares = 0;
    for (int i = 1; i &amp;lt;= N; ++i) {
        for (int j = 1; j &amp;lt;= sqrt(i); ++j)
        {
            if(i%j == 0) {
                ++squares;
            }
        }
    }
    cout &amp;lt;&amp;lt; squares &amp;lt;&amp;lt; "\n";
    return 0;
}
&lt;/code&gt;&lt;/pre&gt;</description><link>http://code-jedi.chintanghate.me/2014/11/06/ae00/</link><guid isPermaLink="false">c3c7f42b-4b47-4472-b147-34bde82f18c4</guid><category>SPOJ</category><dc:creator>Chintan Ghate</dc:creator><pubDate>Thu, 06 Nov 2014 04:05:44 GMT</pubDate></item><item><title>LASTDIG</title><description>&lt;p&gt;Nestor was doing the work of his math class about three days but he is tired of make operations a lot and he should deliver his task tomorrow. His math’s teacher gives two numbers a and b. The problem consist in find the last digit of the potency of base a and index b. Help Nestor with his problem. You are given two integer numbers: the base a (0 &amp;lt;= a &amp;lt;= 20) and the index b (0 &amp;lt;= b &amp;lt;= 2,147,483,000), a and b both are not 0. You have to find the last digit of a^b.&lt;/p&gt;

&lt;h6 id="input"&gt;Input&lt;/h6&gt;

&lt;p&gt;The first line of input contains an integer t, the number of test cases (t &amp;lt;= 30). t test cases follow. For each test case will appear a and b separated by space.&lt;/p&gt;

&lt;h6 id="output"&gt;Output&lt;/h6&gt;

&lt;p&gt;For each test case output an integer per line representing the result.&lt;/p&gt;

&lt;p&gt;Example&lt;/p&gt;

&lt;p&gt;Input: &lt;br&gt;
2 &lt;br&gt;
3 10 &lt;br&gt;
6 2&lt;/p&gt;

&lt;p&gt;Output: &lt;br&gt;
9 &lt;br&gt;
6&lt;/p&gt;

&lt;hr&gt;

&lt;pre&gt;&lt;code class="prettyprint"&gt;#include &amp;lt;iostream&amp;gt;
#include &amp;lt;vector&amp;gt;

using namespace std;

long long mod(long long a, long long b) {  
    return (a % b &amp;lt; 0 ? a % b + b : a % b);
}

int powMod10(long long a, long long b) {  
    if (b == 0) {
        return 1;
    } else if (a == 0) {
        return 0;
    } else {
        vector &amp;lt;long long&amp;gt; powers;
        powers.push_back(a%10);

        do {
            powers.push_back((powers.back()*(a%10))%10);
        } while(powers.back() != powers.front());

        int cycleSize = powers.size() - 1;
        return powers[mod((b-1),cycleSize)];
    }
    return 0;
}

int main() {  
    int t;
    cin &amp;gt;&amp;gt; t;

    for (;t--;) {
        long long a, b;
        cin &amp;gt;&amp;gt; a &amp;gt;&amp;gt; b;
        cout &amp;lt;&amp;lt; powMod10(a, b) &amp;lt;&amp;lt; "\n";
    }
    return 0;
}
&lt;/code&gt;&lt;/pre&gt;</description><link>http://code-jedi.chintanghate.me/2014/11/06/lastdig/</link><guid isPermaLink="false">d64aa5b2-b645-44fd-80ab-e8fd44b1e99c</guid><category>SPOJ</category><dc:creator>Chintan Ghate</dc:creator><pubDate>Thu, 06 Nov 2014 03:50:48 GMT</pubDate></item><item><title>Hello, Objective-C!</title><description>&lt;h6 id="oldschoolobjectivec"&gt;Old School Objective-C&lt;/h6&gt;

&lt;p&gt;I will be attempting to relearn Objective-C using a text-editor, &lt;strong&gt;Sublime Text&lt;/strong&gt;, and &lt;strong&gt;terminal&lt;/strong&gt;, and will be maintaining a log of my adventures here, under the tag &lt;strong&gt;Objective-C&lt;/strong&gt;. As always, beginning with "Hello, world!".&lt;/p&gt;

&lt;hr&gt;

&lt;h6 id="setup"&gt;Setup&lt;/h6&gt;

&lt;p&gt;I am currently running &lt;strong&gt;OS X Yosemtie&lt;/strong&gt; with &lt;strong&gt;Xcode 6&lt;/strong&gt; and &lt;strong&gt;Xcode Command Line Tools&lt;/strong&gt; installed. We will be needing &lt;em&gt;Xcode Command Line Tools&lt;/em&gt; to run our programs from terminal.&lt;/p&gt;

&lt;hr&gt;

&lt;h6 id="code"&gt;Code&lt;/h6&gt;

&lt;p&gt;Open the text-editor of your choice and type the code given below, save it as &lt;code&gt;HelloWorld.m&lt;/code&gt;. Objective-C implemetation files use the &lt;code&gt;.m&lt;/code&gt; extension.  &lt;/p&gt;

&lt;pre&gt;&lt;code class="prettyprint"&gt;#import &amp;lt;Foundation/Foundation.h&amp;gt;

int main() {  
    NSLog(@"Hello, World!");
    return 0;
} 
&lt;/code&gt;&lt;/pre&gt;

&lt;hr&gt;

&lt;h6 id="compile"&gt;Compile&lt;/h6&gt;

&lt;p&gt;Fire-up the terminal. Go to the directory where you have saved the code using &lt;code&gt;cd&lt;/code&gt; command, and type the following command.  &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gcc -framework Foundation HelloWorld.m -o HelloWorld  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We are using the &lt;code&gt;gcc&lt;/code&gt; compiler, the same which is used for compiling C-programs. The compiler transforms our Objective-C code  into an executable program. We are using the &lt;code&gt;Foundation&lt;/code&gt; framework to compile &lt;code&gt;HelloWorld.m&lt;/code&gt; into an executable named &lt;code&gt;HelloWorld&lt;/code&gt;. The last part &lt;code&gt;-o HelloWorld&lt;/code&gt; is optional, ignoring which would name the executable file with a default name &lt;code&gt;a.out&lt;/code&gt;. Now that we have compiled the code successfully, lets run it.&lt;/p&gt;

&lt;hr&gt;

&lt;h6 id="run"&gt;Run&lt;/h6&gt;

&lt;p&gt;To run the executable we get after compiling &lt;code&gt;HelloWorld.m&lt;/code&gt;, type the below command in terminal and you will be able to see the output.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;./HelloWorld
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;On running the code, you will be getting an output like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;2014-11-05 22:39:13.065 HelloWorld[5715:121885] Hello, World!  
&lt;/code&gt;&lt;/pre&gt;

&lt;hr&gt;

&lt;h6 id="trickbehindthemagic"&gt;Trick behind the Magic&lt;/h6&gt;

&lt;blockquote&gt;
  &lt;p&gt;Programming is like magic. First you see the magician cast a spell, see the magic happen, feel amazed and then try to figure out how it was done.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now that we have ran the program successfully and recieved an output, lets see how the pieces in the code worked to give us the output.  &lt;/p&gt;

&lt;pre&gt;&lt;code class="prettyprint"&gt;#import &amp;lt;Foundation/Foundation.h&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To include header files in our code, we use &lt;code&gt;#import&lt;/code&gt; directive. The &lt;code&gt;#import&lt;/code&gt; directive is like C’s &lt;code&gt;#include&lt;/code&gt; directive, except that it makes sure that the same file is never included more than once. Here we are including &lt;code&gt;Foundation.h&lt;/code&gt; file from &lt;code&gt;Foundation&lt;/code&gt; framework. Files with &lt;code&gt;.h&lt;/code&gt; extension are header files. The header file having same name as the framework is called an &lt;em&gt;umbrella header file&lt;/em&gt;, it prevents us from having to add all the individual header files from a framework. &lt;em&gt;Foundation&lt;/em&gt; framework provides  a set of useful primitive object classes. In this program we use the &lt;code&gt;NSLog&lt;/code&gt; function from the &lt;em&gt;Foundation&lt;/em&gt; framework. The framework was developed by NeXTStep, which was acquired by Apple and these &lt;em&gt;Foundation&lt;/em&gt; classes became part of Mac OS X and iOS. Since it was developed by NeXTStep, it has class prefix of "NS".  &lt;/p&gt;

&lt;pre&gt;&lt;code class="prettyprint"&gt;int main() {  
    NSLog(@"Hello, World!");
    return 0;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is the &lt;code&gt;main&lt;/code&gt; function. Every program has one and only one main function, and the execution of a program starts from here. The return type of &lt;em&gt;main&lt;/em&gt; function is &lt;em&gt;int&lt;/em&gt;. On successful execution it returns &lt;em&gt;0&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;NSLog&lt;/code&gt; function accepts a string as its argument and outputs it to the console/terminal. In this case the string is &lt;code&gt;@"Hello, World!"&lt;/code&gt;. In Objective-C &lt;code&gt;@&lt;/code&gt; is used before the literal to denote it as an &lt;em&gt;object&lt;/em&gt;. String objects are closed in double-quotes &lt;code&gt;"&lt;/code&gt;. Thats all there is to know about &lt;code&gt;HelloWorld.m&lt;/code&gt;, enough to get enthusiastic and excited about our next adventure.&lt;/p&gt;

&lt;p&gt;Now that you know the trick, try to break it, experiment with it; try doing something new with it.  I'll see you in our next adventure.&lt;/p&gt;</description><link>http://code-jedi.chintanghate.me/2014/11/05/hello-objective-c/</link><guid isPermaLink="false">9ebd4df7-1252-4f6e-8a83-7e30e3d3d5b5</guid><category>Objective-C</category><dc:creator>Chintan Ghate</dc:creator><pubDate>Wed, 05 Nov 2014 16:45:43 GMT</pubDate></item><item><title>JULKA</title><description>&lt;p&gt;Julka surprised her teacher at preschool by solving the following riddle:&lt;/p&gt;

&lt;p&gt;Klaudia and Natalia have 10 apples together, but Klaudia has two apples more than Natalia. How many apples does each of he girls have?&lt;/p&gt;

&lt;p&gt;Julka said without thinking: Klaudia has 6 apples and Natalia 4 apples. The teacher tried to check if Julka's answer wasn't accidental and repeated the riddle every time increasing the numbers. Every time Julka answered correctly. The surprised teacher wanted to continue questioning Julka, but with big numbers she could't solve the riddle fast enough herself. Help the teacher and write a program which will give her the right answers.&lt;/p&gt;

&lt;h6 id="task"&gt;Task&lt;/h6&gt;

&lt;ul&gt;
&lt;li&gt;Write a program which reads from standard input the number of apples the girls have together and how many more apples Klaudia has.&lt;/li&gt;
&lt;li&gt;Counts the number of apples belonging to Klaudia and the number of apples belonging to Natalia.&lt;/li&gt;
&lt;li&gt;Writes the outcome to standard output.&lt;/li&gt;
&lt;/ul&gt;

&lt;h6 id="input"&gt;Input&lt;/h6&gt;

&lt;p&gt;Ten test cases (given one under another, you have to process all!). Every test case consists of two lines. The first line says how many apples both girls have together. The second line says how many more apples Klaudia has. Both numbers are positive integers. It is known that both girls have no more than 10&lt;sup&gt;100&lt;/sup&gt; (1 and 100 zeros) apples together. As you can see apples can be very small.&lt;/p&gt;

&lt;h6 id="output"&gt;Output&lt;/h6&gt;

&lt;p&gt;For every test case your program should output two lines. The first line should contain the number of apples belonging to Klaudia. The second line should contain the number of apples belonging to Natalia.&lt;/p&gt;

&lt;p&gt;Example&lt;/p&gt;

&lt;p&gt;Input: &lt;br&gt;
10 &lt;br&gt;
2 &lt;br&gt;
[and 9 test cases more]&lt;/p&gt;

&lt;p&gt;Output: &lt;br&gt;
6 &lt;br&gt;
4 &lt;br&gt;
[and 9 test cases more]&lt;/p&gt;

&lt;hr&gt;

&lt;pre&gt;&lt;code class="prettyprint"&gt;#include &amp;lt;iostream&amp;gt;
#include &amp;lt;vector&amp;gt;
#include &amp;lt;string&amp;gt;

using namespace std;

string vectorToIntString(vector&amp;lt;int&amp;gt; A) {  
    string S = "";
    bool flag = false;
    for (int i = A.size() - 1; i &amp;gt;= 0 ; --i) {
        if (!flag &amp;amp;&amp;amp; A[i] == 0) {
            continue;
        } else {
            flag = true;
            S += char(A[i]+'0');
        }
    }
    return S;
}

//(A-B)
vector&amp;lt;int&amp;gt; vectorSubstraction(vector&amp;lt;int&amp;gt; A, vector&amp;lt;int&amp;gt; B) {  
    for (int i = 0; i &amp;lt; A.size(); ++i) {
        if (A[i] &amp;gt;= B[i]) {
            A[i] -= B[i];
        } else {
            A[i] += 10;
            A[i] -= B[i];
            --A[i+1];
        }
    }
    return A;
}

//(A/n)
vector&amp;lt;int&amp;gt; vectorDivision(vector&amp;lt;int&amp;gt; A, int n) {  
    int current = 0;
    for (int i = A.size() - 1; i &amp;gt;= 0; --i)
    {
        current *= 10;
        current += A[i];
        A[i] = current / 2;
        current %= 2;
    }
    return A;
}

int main() {  
    for (int T = 0; T &amp;lt; 10; ++T) {
        string t, m;
        cin &amp;gt;&amp;gt; t &amp;gt;&amp;gt; m;
        vector&amp;lt;int&amp;gt; total(102,0), more(102,0), totalCopy(102,0);
        for (int i = 0; i &amp;lt; t.size(); ++i) {
            total[i] = t[t.size()-1-i]-'0';
        }
        totalCopy = total;
        for (int i = 0; i &amp;lt; m.size(); ++i) {
            more[i] = m[m.size()-1-i] - '0';
        }

        total = vectorSubstraction(total,more);
        total = vectorDivision(total,2);
        totalCopy = vectorSubstraction(totalCopy,total);
        cout &amp;lt;&amp;lt; vectorToIntString(totalCopy) &amp;lt;&amp;lt; "\n";
        cout &amp;lt;&amp;lt; vectorToIntString(total) &amp;lt;&amp;lt; "\n";
    }
    return 0;
}
&lt;/code&gt;&lt;/pre&gt;</description><link>http://code-jedi.chintanghate.me/2014/11/05/julka/</link><guid isPermaLink="false">c097ec1f-52d9-489f-a1f7-5992d20768a2</guid><category>SPOJ</category><dc:creator>Chintan Ghate</dc:creator><pubDate>Wed, 05 Nov 2014 09:36:58 GMT</pubDate></item><item><title>FASHION</title><description>&lt;p&gt;A fashion show rates participants according to their level of hotness. Two different fashion shows were organized, one for men and the other for women. A date for the third is yet to be decided ;) .&lt;/p&gt;

&lt;p&gt;Now the results of both fashion shows are out. The participants of both the fashion shows have decided to date each other, but as usual they have difficuly in choosing their partners. The Maximum Match dating service (MMDS) comes to their rescue and matches them in such a way that that maximizes the hotness bonds for all couples.&lt;/p&gt;

&lt;p&gt;If a man has been rated at hotness level x and a women at hotness level y, the value of their hotness bond is x*y.&lt;/p&gt;

&lt;p&gt;Both fashion shows contain N participants each. MMDS has done its job and your job is to find the sum of hotness bonds for all the couples that MMDS has proposed.&lt;/p&gt;

&lt;h6 id="input"&gt;Input&lt;/h6&gt;

&lt;p&gt;The first line of the input contains an integer t, the number of test cases. t test cases follow.&lt;/p&gt;

&lt;p&gt;Each test case consists of 3 lines:&lt;/p&gt;

&lt;p&gt;The first line contains a single integer N (1 &amp;lt;= N &amp;lt;= 1000). &lt;br&gt;
The second line contains N integers separated by single spaces denoting the hotness levels of the men. &lt;br&gt;
The third line contains N integers separated by single spaces denoting the hotness levels of the women. &lt;br&gt;
All hotness ratings are on a scale of 0 to 10.&lt;/p&gt;

&lt;h6 id="output"&gt;Output&lt;/h6&gt;

&lt;p&gt;For each test case output a single line containing a single integer denoting the sum of the hotness bonds for all pairs that MMDS has proposed.&lt;/p&gt;

&lt;p&gt;Example&lt;/p&gt;

&lt;p&gt;Input: &lt;br&gt;
2 &lt;br&gt;
2 &lt;br&gt;
1 1 &lt;br&gt;
3 2 &lt;br&gt;
3 &lt;br&gt;
2 3 2 &lt;br&gt;
1 3 2&lt;/p&gt;

&lt;p&gt;Output: &lt;br&gt;
5 &lt;br&gt;
15&lt;/p&gt;

&lt;hr&gt;

&lt;pre&gt;&lt;code class="prettyprint"&gt;#include &amp;lt;iostream&amp;gt;
#include &amp;lt;vector&amp;gt;
#include &amp;lt;algorithm&amp;gt;

using namespace std;

int main() {  
    int T;
    cin &amp;gt;&amp;gt; T;

    for(;T--;) {
        int N;
        cin &amp;gt;&amp;gt; N;
        vector&amp;lt;int&amp;gt; MH(N), WH(N);
        for (int i = 0; i &amp;lt; N; ++i) {
            cin &amp;gt;&amp;gt; MH[i];
        }
        for (int i = 0; i &amp;lt; N; ++i) {
            cin &amp;gt;&amp;gt; WH[i];
        }
        sort(MH.begin(), MH.end());
        sort(WH.begin(), WH.end());
        int total = 0;
        for (int i = 0; i &amp;lt; N; ++i) {
            total += MH[i]*WH[i];
        }
        cout &amp;lt;&amp;lt; total &amp;lt;&amp;lt; "\n";
    }
    return 0;
}
&lt;/code&gt;&lt;/pre&gt;</description><link>http://code-jedi.chintanghate.me/2014/11/05/fashion/</link><guid isPermaLink="false">ab3b5bc5-75c8-47f3-ab82-adbc88c4bc55</guid><category>SPOJ</category><dc:creator>Chintan Ghate</dc:creator><pubDate>Wed, 05 Nov 2014 08:41:22 GMT</pubDate></item><item><title>CANDY</title><description>&lt;p&gt;Jennifer is a teacher in the first year of a primary school. She has gone for a trip with her class today. She has taken a packet of candies for each child. Unfortunatelly, the sizes of the packets are not the same.&lt;/p&gt;

&lt;p&gt;Jennifer is afraid that each child will want to have the biggest packet of candies and this will lead to quarrels or even fights among children. She wants to avoid this. Therefore, she has decided to open all the packets, count the candies in each packet and move some candies from bigger packets to smaller ones so that each packet will contain the same number of candies. The question is how many candies she has to move.&lt;/p&gt;

&lt;h6 id="input"&gt;Input&lt;/h6&gt;

&lt;p&gt;The input file consists of several blocks of data. Each block starts with the number of candy packets N(1&amp;lt;= N &amp;lt;=10000) followed by N integers (each less than 1000) in separate lines, giving the number of candies in each packet. After the last block of data there is the number -1.&lt;/p&gt;

&lt;h6 id="output"&gt;Output&lt;/h6&gt;

&lt;p&gt;The output file should contain one line with the smallest number of moves for each block of data. One move consists of taking one candy from a packet and putting it into another one. If it is not possible to have the same number of candies in each packet, output the number -1.&lt;/p&gt;

&lt;p&gt;Example&lt;/p&gt;

&lt;p&gt;Input file: &lt;br&gt;
5 &lt;br&gt;
1 &lt;br&gt;
1 &lt;br&gt;
1 &lt;br&gt;
1 &lt;br&gt;
6 &lt;br&gt;
2 &lt;br&gt;
3 &lt;br&gt;
4 &lt;br&gt;
-1&lt;/p&gt;

&lt;p&gt;Output file: &lt;br&gt;
4 &lt;br&gt;
-1&lt;/p&gt;

&lt;hr&gt;

&lt;pre&gt;&lt;code class="prettyprint"&gt;#include &amp;lt;iostream&amp;gt;
#include &amp;lt;vector&amp;gt;

using namespace std;

int main() {  
    int N;
    while((cin &amp;gt;&amp;gt; N) &amp;amp;&amp;amp; N != -1) {
        vector&amp;lt;int&amp;gt; candies(N,0);
        int total = 0;

        for (int i = 0; i &amp;lt; N; ++i) {
            cin &amp;gt;&amp;gt; candies[i];
            total += candies[i];
        }

        if (total % N != 0) {
            cout &amp;lt;&amp;lt; "-1\n";
        } else {
            int indieCandies = total / N;
            int transfers = 0;
            for (int i = 0; i &amp;lt; N; ++i) {
                if (candies[i] &amp;gt; indieCandies) {
                    transfers += (candies[i] - indieCandies);
                }
            }
            cout &amp;lt;&amp;lt; transfers &amp;lt;&amp;lt; "\n";
        }
    }
    return 0;
}
&lt;/code&gt;&lt;/pre&gt;</description><link>http://code-jedi.chintanghate.me/2014/11/05/candy/</link><guid isPermaLink="false">a3bc4882-763a-4c07-b993-522b7f9db526</guid><category>SPOJ</category><dc:creator>Chintan Ghate</dc:creator><pubDate>Wed, 05 Nov 2014 08:31:29 GMT</pubDate></item><item><title>ACPC10A</title><description>&lt;p&gt;According to Wikipedia, an arithmetic progression (AP) is a sequence of numbers such that the difference of any two successive members of the sequence is a constant. For instance, the sequence 3, 5, 7, 9, 11, 13, . . . is an arithmetic progression with common difference 2. For this problem, we will limit ourselves to arithmetic progression whose common difference is a non-zero integer. &lt;br&gt;
On the other hand, a geometric progression (GP) is a sequence of numbers where each term after the first is found by multiplying the previous one by a fixed non-zero number called the common ratio. For example, the sequence 2, 6, 18, 54, . . . is a geometric progression with common ratio 3. For this problem, we will limit ourselves to geometric progression whose common ratio is a non-zero integer. &lt;br&gt;
Given three successive members of a sequence, you need to determine the type of the progression and the next successive member.&lt;/p&gt;

&lt;h6 id="input"&gt;Input&lt;/h6&gt;

&lt;p&gt;Your program will be tested on one or more test cases. Each case is specified on a single line with three integers (−10, 000 &amp;lt; a1 , a2 , a3 &amp;lt; 10, 000) where a1 , a2 , and a3 are distinct. &lt;br&gt;
The last case is followed by a line with three zeros.&lt;/p&gt;

&lt;h6 id="output"&gt;Output&lt;/h6&gt;

&lt;p&gt;For each test case, you program must print a single line of the form: &lt;br&gt;
XX v &lt;br&gt;
where XX is either AP or GP depending if the given progression is an Arithmetic or Geometric Progression. v is the next member of the given sequence. All input cases are guaranteed to be either an arithmetic or geometric progressions.&lt;/p&gt;

&lt;p&gt;Example&lt;/p&gt;

&lt;p&gt;Input: &lt;br&gt;
4 7 10 &lt;br&gt;
2 6 18 &lt;br&gt;
0 0 0&lt;/p&gt;

&lt;p&gt;Output: &lt;br&gt;
AP 13 &lt;br&gt;
GP 54&lt;/p&gt;

&lt;hr&gt;

&lt;pre&gt;&lt;code class="prettyprint"&gt;#include &amp;lt;iostream&amp;gt;

using namespace std;

int main() {  
    int a1, a2, a3;
    while ((cin &amp;gt;&amp;gt; a1 &amp;gt;&amp;gt; a2 &amp;gt;&amp;gt; a3) &amp;amp;&amp;amp; 
          !(a1 == 0 &amp;amp;&amp;amp; a2 == 0 &amp;amp;&amp;amp; a3 == 0)) {
        if (a3 - a2 == a2 - a1) {
            cout &amp;lt;&amp;lt; "AP " &amp;lt;&amp;lt; 2*a3 - a2 &amp;lt;&amp;lt; "\n"; 
        } else {
            cout &amp;lt;&amp;lt; "GP " &amp;lt;&amp;lt; a3*a3/a2 &amp;lt;&amp;lt; "\n";
        }
    }
    return 0;
}
&lt;/code&gt;&lt;/pre&gt;</description><link>http://code-jedi.chintanghate.me/2014/11/05/acpc10a/</link><guid isPermaLink="false">080098dd-c125-47ba-8250-5d17052f185a</guid><category>SPOJ</category><dc:creator>Chintan Ghate</dc:creator><pubDate>Wed, 05 Nov 2014 04:59:48 GMT</pubDate></item><item><title>TOANDFRO</title><description>&lt;p&gt;Mo and Larry have devised a way of encrypting messages. They first decide secretly on the number of columns and write the message (letters only) down the columns, padding with extra random letters so as to make a rectangular array of letters. For example, if the message is “There’s no place like home on a snowy night” and there are five columns, Mo would write down  &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;t o i o y  
h p k n n  
e l e a i  
r a h s g  
e c o n h  
s e m o t  
n l e w x  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that Mo includes only letters and writes them all in lower case. In this example, Mo used the character ‘x’ to pad the message out to make a rectangle, although he could have used any letter. Mo then sends the message to Larry by writing the letters in each row, alternating left-to-right and right-to-left. So, the above would be encrypted as&lt;/p&gt;

&lt;p&gt;toioynnkpheleaigshareconhtomesnlewx&lt;/p&gt;

&lt;p&gt;Your job is to recover for Larry the original message (along with any extra padding letters) from the encrypted one.&lt;/p&gt;

&lt;h6 id="input"&gt;Input&lt;/h6&gt;

&lt;p&gt;There will be multiple input sets. Input for each set will consist of two lines. The first line will contain an integer in the range 2...20 indicating the number of columns used. The next line is a string of up to 200 lower case letters. The last input set is followed by a line containing a single 0, indicating end of input.&lt;/p&gt;

&lt;h6 id="output"&gt;Output&lt;/h6&gt;

&lt;p&gt;Each input set should generate one line of output, giving the original plaintext message, with no spaces.&lt;/p&gt;

&lt;p&gt;Example&lt;/p&gt;

&lt;p&gt;Input:&lt;/p&gt;

&lt;p&gt;5 &lt;br&gt;
toioynnkpheleaigshareconhtomesnlewx &lt;br&gt;
3 &lt;br&gt;
ttyohhieneesiaabss &lt;br&gt;
0&lt;/p&gt;

&lt;p&gt;Output:&lt;/p&gt;

&lt;p&gt;theresnoplacelikehomeonasnowynightx &lt;br&gt;
thisistheeasyoneab&lt;/p&gt;

&lt;hr&gt;

&lt;pre&gt;&lt;code class="prettyprint"&gt;#include &amp;lt;iostream&amp;gt;
#include &amp;lt;string&amp;gt;
#include &amp;lt;vector&amp;gt;

using namespace std;

int main() {  
    int N;
    while((cin &amp;gt;&amp;gt; N) &amp;amp;&amp;amp; N != 0) {
        string S;
        cin &amp;gt;&amp;gt; S;

        int M = S.size()/N;
        vector&amp;lt;vector&amp;lt;char&amp;gt; &amp;gt; grid(M, vector&amp;lt;char&amp;gt; (N));

        for (int i = 0, k = 0; i &amp;lt; M; ++i) {
            for (int j = 0; j &amp;lt; N; ++j) {
                if (i&amp;amp;1) {
                    grid[i][N-1-j] = S[k++];
                } else {
                    grid[i][j] = S[k++];
                }
            }
        }

        for (int i = 0; i &amp;lt; N; ++i) {
            for (int j = 0; j &amp;lt; M; ++j) {
                cout &amp;lt;&amp;lt; grid[j][i];
            }
        }

        cout &amp;lt;&amp;lt; "\n";
    }
    return 0;
}
&lt;/code&gt;&lt;/pre&gt;</description><link>http://code-jedi.chintanghate.me/2014/11/05/toandfro/</link><guid isPermaLink="false">481707f0-2b22-4f46-840d-e3e6e32d28cd</guid><category>SPOJ</category><dc:creator>Chintan Ghate</dc:creator><pubDate>Wed, 05 Nov 2014 04:39:13 GMT</pubDate></item><item><title>SAMER08F</title><description>&lt;p&gt;Richard Phillips Feynman was a well known American physicist and a recipient of the Nobel Prize in Physics. He worked in theoretical physics and also pioneered the field of quantum computing. He visited South America for ten months, giving lectures and enjoying life in the tropics. He is also known for his books "Surely You're Joking, Mr. Feynman!" and "What Do You Care What Other People Think?", which include some of his adventures below the equator.&lt;/p&gt;

&lt;p&gt;His life-long addiction was solving and making puzzles, locks, and cyphers. Recently, an old farmer in South America, who was a host to the young physicist in 1949, found some papers and notes that is believed to have belonged to Feynman. Among notes about mesons and electromagnetism, there was a napkin where he wrote a simple puzzle: "how many different squares are there in a grid of N ×N squares?".&lt;/p&gt;

&lt;p&gt;In the same napkin there was a drawing which is reproduced below, showing that, for N=2, the answer is 5. &lt;/p&gt;

&lt;p&gt;&lt;img src="http://code-jedi.chintanghate.me/content/images/2014/11/disatoba-feynman.gif" alt="Illustration"&gt;&lt;/p&gt;

&lt;h6 id="input"&gt;Input&lt;/h6&gt;

&lt;p&gt;The input contains several test cases. Each test case is composed of a single line, containing only one integer N, representing the number of squares in each side of the grid (1 ≤ N ≤ 100).&lt;/p&gt;

&lt;p&gt;The end of input is indicated by a line containing only one zero.&lt;/p&gt;

&lt;h6 id="output"&gt;Output&lt;/h6&gt;

&lt;p&gt;For each test case in the input, your program must print a single line, containing the number of different squares for the corresponding input.&lt;/p&gt;

&lt;p&gt;Example&lt;/p&gt;

&lt;p&gt;Input: &lt;br&gt;
2 &lt;br&gt;
1 &lt;br&gt;
8 &lt;br&gt;
0&lt;/p&gt;

&lt;p&gt;Output: &lt;br&gt;
5 &lt;br&gt;
1 &lt;br&gt;
204&lt;/p&gt;

&lt;hr&gt;

&lt;pre&gt;&lt;code class="prettyprint"&gt;#include &amp;lt;iostream&amp;gt;
#include &amp;lt;vector&amp;gt;
#include &amp;lt;numeric&amp;gt;

using namespace std;

int main() {  
    vector&amp;lt;int&amp;gt; SQR(101, 0);
    for (int i = 0; i &amp;lt; 101; ++i) {
        SQR[i] = i*i;
    }

    int N;
    while((cin &amp;gt;&amp;gt; N) &amp;amp;&amp;amp; N != 0) {
        cout &amp;lt;&amp;lt; accumulate(SQR.begin(), SQR.begin()+N+1, 0) &amp;lt;&amp;lt; "\n";
    }
    return 0;
}
&lt;/code&gt;&lt;/pre&gt;</description><link>http://code-jedi.chintanghate.me/2014/11/05/samer08f/</link><guid isPermaLink="false">f91be8f7-583b-49ae-a8da-411d7cbaaa52</guid><category>SPOJ</category><dc:creator>Chintan Ghate</dc:creator><pubDate>Wed, 05 Nov 2014 03:46:32 GMT</pubDate></item><item><title>NSTEPS</title><description>&lt;p&gt;Starting from point (0,0) on a plane, we have written all non-negative integers 0, 1, 2,... as shown in the figure. For example, 1, 2, and 3 has been written at points (1,1), (2,0), and (3, 1) respectively and this pattern has continued.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://code-jedi.chintanghate.me/content/images/2014/11/NSTEPS.png" alt="Illustration"&gt;&lt;/p&gt;

&lt;p&gt;You are to write a program that reads the coordinates of a point (x, y), and writes the number (if any) that has been written at that point. (x, y) coordinates in the input are in the range 0...10000.&lt;/p&gt;

&lt;h6 id="input"&gt;Input&lt;/h6&gt;

&lt;p&gt;The first line of the input is N, the number of test cases for this problem. In each of the N following lines, there is x, and y representing the coordinates (x, y) of a point.&lt;/p&gt;

&lt;h6 id="output"&gt;Output&lt;/h6&gt;

&lt;p&gt;For each point in the input, write the number written at that point or write No Number if there is none.&lt;/p&gt;

&lt;p&gt;Example&lt;/p&gt;

&lt;p&gt;Input: &lt;br&gt;
3 &lt;br&gt;
4 2 &lt;br&gt;
6 6 &lt;br&gt;
3 4&lt;/p&gt;

&lt;p&gt;Output: &lt;br&gt;
6 &lt;br&gt;
12 &lt;br&gt;
No Number&lt;/p&gt;

&lt;hr&gt;

&lt;pre&gt;&lt;code class="prettyprint"&gt;#include &amp;lt;iostream&amp;gt;

using namespace std;

int main() {  
    int T;
    cin &amp;gt;&amp;gt; T;

    for(;T--;) {
        int x, y;
        cin &amp;gt;&amp;gt; x &amp;gt;&amp;gt; y;

        if (x == y || x - y == 2) {
            if (x&amp;amp;1) {
                cout &amp;lt;&amp;lt; x + y - 1 &amp;lt;&amp;lt; "\n";
            } else {
                cout &amp;lt;&amp;lt; x + y &amp;lt;&amp;lt; "\n";
            }
        } else {
            cout &amp;lt;&amp;lt; "No Number\n";
        }
    }
    return 0;
}
&lt;/code&gt;&lt;/pre&gt;</description><link>http://code-jedi.chintanghate.me/2014/11/05/nsteps/</link><guid isPermaLink="false">98054c18-b6ee-47d8-9175-75403a49b3b3</guid><category>SPOJ</category><dc:creator>Chintan Ghate</dc:creator><pubDate>Wed, 05 Nov 2014 03:13:01 GMT</pubDate></item></channel></rss>