<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[SPOJ - Code Jedi]]></title><description><![CDATA[Code, algorithms and design.]]></description><link>http://code-jedi.chintanghate.me/</link><generator>Ghost 0.5</generator><lastBuildDate>Fri, 07 Nov 2014 17:59:11 GMT</lastBuildDate><atom:link href="http://code-jedi.chintanghate.me/tag/spoj/rss/" rel="self" type="application/rss+xml"/><ttl>60</ttl><item><title><![CDATA[WILLITST]]></title><description><![CDATA[<p>When Bob was in library in University of Warsaw he saw on one of facades caption :"Will it ever stop?" and below some mysterious code:  </p>

<pre><code class="prettyprint">while n &gt; 1  
  if n mod 2 = 0 then
    n:=n/2
  else
    n:=3*n+3
</code></pre>

<p>Help him finding it out !</p>

<h6 id="input">Input</h6>

<p>In first line one number n&lt;=10^14.</p>

<h6 id="output">Output</h6>

<p>Print "TAK" if program will stop, otherwise print "NIE"</p>

<p>Example</p>

<p>Input: <br>
4</p>

<p>Output: <br>
TAK</p>

<hr>

<pre><code class="prettyprint">#include &lt;iostream&gt;

using namespace std;

int main() {  
    unsigned long long N;
    cin &gt;&gt; N;

    unsigned long long i = 1;
    while (i &lt; N) {
        i *= 2;
    }
    if (i == N) {
        cout &lt;&lt; "TAK\n";
    } else {
        cout &lt;&lt; "NIE\n";
    }

    return 0;
}
</code></pre>]]></description><link>http://code-jedi.chintanghate.me/2014/11/07/willitst/</link><guid isPermaLink="false">8367d7e9-3ece-4651-bcae-8f74c68912d8</guid><category><![CDATA[SPOJ]]></category><dc:creator><![CDATA[Chintan Ghate]]></dc:creator><pubDate>Fri, 07 Nov 2014 17:55:15 GMT</pubDate></item><item><title><![CDATA[ARMY]]></title><description><![CDATA[<p>The next MechaGodzilla invasion is on its way to Earth. And once again, Earth will be the battleground for an epic war.</p>

<p>MechaGodzilla's army consists of many nasty alien monsters, such as Space Godzilla, King Gidorah, and MechaGodzilla herself.</p>

<p>To stop them and defend Earth, Godzilla and her friends are preparing for the battle.</p>

<h6 id="problem">Problem</h6>

<p>Each army consists of many different monsters. Each monster has a strength that can be described by a positive integer. (The larger the value, the stronger the monster.)</p>

<p>The war will consist of a series of battles. In each battle, the weakest of all the monsters that are still alive is killed.</p>

<p>If there are several weakest monsters, but all of them in the same army, one of them is killed at random. If both armies have at least one of the weakest monsters, a random weakest monster of MechaGodzilla's army is killed.</p>

<p>The war is over if in one of the armies all monsters are dead. The dead army lost, the other one won.</p>

<p>You are given the strengths of all the monsters. Find out who wins the war.</p>

<h6 id="input">Input</h6>

<p>The first line of the input file contains an integer T specifying the number of test cases. Each test case is preceded by a blank line.</p>

<p>Each test case starts with line containing two positive integers NG and NM – the number of monsters in Godzilla's and in MechaGodzilla's army. Two lines follow. The first one contains NG positive integers – the strengths of the monsters in Godzilla's army. Similarly, the second one contains NM positive integers – the strengths of the monsters in MechaGodzilla's army.</p>

<h6 id="output">Output</h6>

<p>For each test case, output a single line with a string that describes the outcome of the battle.</p>

<p>If it is sure that Godzilla's army wins, output the string "Godzilla".</p>

<p>If it is sure that MechaGodzilla's army wins, output the string "MechaGodzilla".</p>

<p>Otherwise, output the string "uncertain".</p>

<p>Example</p>

<p>Input: <br>
2</p>

<p>1 1 <br>
1 <br>
1</p>

<p>3 2 <br>
1 3 2 <br>
5 5</p>

<p>Output: <br>
Godzilla <br>
MechaGodzilla</p>

<h6 id="hint">Hint</h6>

<p>In the first test case, there are only two monsters, and they are equally strong. In this situation, MechaGodzilla's monster is killed and the war ends.</p>

<p>In the second test case, the war will consist of three battles, and in each of them one of Godzilla's monsters dies.</p>

<hr>

<pre><code class="prettyprint">#include &lt;iostream&gt;
#include &lt;vector&gt;
#include &lt;algorithm&gt;
#include &lt;deque&gt;

using namespace std;

int main() {  
    int T;
    cin &gt;&gt; T;
    for (;T--;) {
        int NG, NM;
        cin &gt;&gt; NG &gt;&gt; NM;

        if (NG == 0 &amp;&amp; NM == 0) {
            cout &lt;&lt; "uncertain\n";
        } else {
            vector&lt;int&gt; NGA(NG), NMA(NM);
            for (int i = 0; i &lt; NG; ++i) {
                cin &gt;&gt; NGA[i];
            }
            sort(NGA.begin(), NGA.end());
            for (int i = 0; i &lt; NM; ++i) {
                cin &gt;&gt; NMA[i];
            }
            sort(NMA.begin(), NMA.end());

            deque&lt;int&gt; NGQ(NGA.begin(), NGA.end()), 
                       NMQ(NMA.begin(), NMA.end());
            while (!NGQ.empty() &amp;&amp; !NMQ.empty()) {
                if (NGQ.front() &gt;= NMQ.front()) {
                    NMQ.pop_front();
                } else {
                    NGQ.pop_front();
                }
            }
            if (NGQ.empty()) {
                cout &lt;&lt; "MechaGodzilla\n";
            } else {
                cout &lt;&lt; "Godzilla\n";
            }
        }
    }
    return 0;
}
</code></pre>]]></description><link>http://code-jedi.chintanghate.me/2014/11/07/army/</link><guid isPermaLink="false">32331cd3-7c18-4fc6-b3b6-23ce3e45394d</guid><category><![CDATA[SPOJ]]></category><dc:creator><![CDATA[Chintan Ghate]]></dc:creator><pubDate>Fri, 07 Nov 2014 17:41:53 GMT</pubDate></item><item><title><![CDATA[STAMPS]]></title><description><![CDATA[<p>Everybody hates Raymond. He’s the largest stamp collector on planet earth and because of that he always makes fun of all the others at the stamp collector parties. Fortunately everybody loves Lucy, and she has a plan. She secretly asks her friends whether they could lend her some stamps, so that she can embarrass Raymond by showing an even larger collection than his. Raymond is so sure about his superiority that he always tells how many stamps he’ll show.And since Lucy knows how many she owns, she knows how many more she needs. She also knows how many friends would lend her some stamps and how many each would lend. But she’s like to borrow from as few friends as possible and if she needs too many then she’d rather not do it at all. Can you tell her the minimum number of friends she needs to borrow from?</p>

<h6 id="input">Input</h6>

<p>The first line contains the number of scenarios. Each scenario describes one collectors party and its first line tells you how many stamps (from 1 to 1000000) Lucy needs to borrow and how many friends (from 1 to 1000) offer her some stamps. In a second line you’ll get the number of stamps (from 1 to 10000) each of her friends id offering.</p>

<h6 id="output">Output</h6>

<p>The output for every scenario begins with a line containing “Scenario #i:”, where i is the number of the scenario starting at 1. Then print a single line with the minimum number of friends Lucy needs to borrow stamps from. If it’s impossible even if she borrows everything from everybody, write impossible. Terminate the output for the scenario with a blank line.</p>

<p>Example</p>

<p>Input: <br>
3 <br>
100 6 <br>
13 17 42 9 23 57 <br>
99 6 <br>
13 17 42 9 23 57 <br>
1000 3 <br>
314 159 265</p>

<p>Output: <br>
Scenario #1: <br>
3</p>

<p>Scenario #2: <br>
2</p>

<p>Scenario #3: <br>
impossible</p>

<hr>

<pre><code class="prettyprint">#include &lt;iostream&gt;
#include &lt;vector&gt;
#include &lt;algorithm&gt;

using namespace std;

bool compare (int a, int b) {  
    return a &gt; b;
}

int main() {  
    int T;
    cin &gt;&gt; T;
    for (int t = 1; t &lt;= T; ++t) {
        int needed, friends;
        cin &gt;&gt; needed &gt;&gt; friends;
        vector&lt;int&gt; stamps(friends);
        for (int i = 0; i &lt; friends; ++i) {
            cin &gt;&gt; stamps[i];
        }
        sort(stamps.begin(), stamps.end(), compare);
        int count = 0, sum = 0;
        for (int i = 0; i &lt; friends; ++i) {
            sum += stamps[i];
            ++count;
            if (sum &gt;= needed) {
                break;
            }
        }
        cout &lt;&lt; "Scenario #" &lt;&lt; t &lt;&lt; ":\n";
        if(sum &gt;= needed) {
            cout &lt;&lt; count &lt;&lt; "\n\n";
        } else {
            cout &lt;&lt; "impossible\n\n";
        }
    }
    return 0;
}
</code></pre>]]></description><link>http://code-jedi.chintanghate.me/2014/11/07/stamps/</link><guid isPermaLink="false">59bd02c8-92bc-49d8-a36d-b5c7867409ff</guid><category><![CDATA[SPOJ]]></category><dc:creator><![CDATA[Chintan Ghate]]></dc:creator><pubDate>Fri, 07 Nov 2014 13:12:08 GMT</pubDate></item><item><title><![CDATA[TRICOUNT]]></title><description><![CDATA[<p>We define the LEVEL of a triangle as in the following illustrative image:</p>

<p><img src="http://code-jedi.chintanghate.me/content/images/2014/11/duonghanguyen-tricount.png" alt="Illustration"></p>

<p>Task: Your task is very easy. All you have to do is to count all triangles in the biggest one (Level N).</p>

<h6 id="input">Input</h6>

<p>The first line of the input contains an integer T (T ≤ 10000) - the number of test cases and T lines follow. Each line contains an integer N (1 ≤ N ≤ 10<sup>6</sup>) which is the level of the triangle in that test case.</p>

<h6 id="output">Output</h6>

<p>For each test case, you should write a seperate line: the number of triangles in the biggest one (Level N). (All answers will fit within the range of a 64-bit integer)</p>

<p>Example</p>

<p>Input: <br>
3 <br>
1 <br>
2 <br>
3</p>

<p>Output: <br>
1 <br>
5 <br>
13</p>

<hr>

<pre><code class="prettyprint">#include &lt;iostream&gt;

using namespace std;

int main() {  
    int T;
    cin &gt;&gt; T;
    for (;T--;) {
        unsigned long long n;
        cin &gt;&gt; n;
        cout &lt;&lt; (n * (n + 2) * (2 * n + 1)) / 8 &lt;&lt; "\n";
    }
    return 0;
}
</code></pre>]]></description><link>http://code-jedi.chintanghate.me/2014/11/07/tricount/</link><guid isPermaLink="false">f8268540-6cb8-4806-b1f7-b4630a35d49c</guid><category><![CDATA[SPOJ]]></category><dc:creator><![CDATA[Chintan Ghate]]></dc:creator><pubDate>Fri, 07 Nov 2014 12:27:11 GMT</pubDate></item><item><title><![CDATA[PERMUT2]]></title><description><![CDATA[<p>Some programming contest problems are really tricky: not only do they require a different output format from what you might have expected, but also the sample output does not show the difference. For an example, let us look at permutations.</p>

<p>A permutation of the integers 1 to n is an ordering of these integers. So the natural way to represent a permutation is to list the integers in this order. With n = 5, a permutation might look like 2, 3, 4, 5, 1. </p>

<p>However, there is another possibility of representing a permutation: You create a list of numbers where the i-th number is the position of the integer i in the permutation. Let us call this second possibility an inverse permutation. The inverse permutation for the sequence above is 5, 1, 2, 3, 4. </p>

<p>An ambiguous permutation is a permutation which cannot be distinguished from its inverse permutation. The permutation 1, 4, 3, 2 for example is ambiguous, because its inverse permutation is the same. To get rid of such annoying sample test cases, you have to write a program which detects if a given permutation is ambiguous or not.</p>

<h6 id="input">Input</h6>

<p>The input contains several test cases. <br>
The first line of each test case contains an integer n (1 ≤ n ≤ 100000). Then a permutation of the integers 1 to n follows in the next line. There is exactly one space character between consecutive integers. You can assume that every integer between 1 and n appears exactly once in the permutation. <br>
The last test case is followed by a zero.</p>

<h6 id="output">Output</h6>

<p>For each test case output whether the permutation is ambiguous or not. Adhere to the format shown in the sample output.</p>

<p>Example</p>

<p>Input: <br>
4 <br>
1 4 3 2 <br>
5 <br>
2 3 4 5 1 <br>
1 <br>
1 <br>
0</p>

<p>Output: <br>
ambiguous <br>
not ambiguous <br>
ambiguous</p>

<hr>

<pre><code class="prettyprint">#include &lt;iostream&gt;
#include &lt;vector&gt;

using namespace std;

int main() {  
    int n;
    while((cin &gt;&gt; n) &amp;&amp; n != 0) {
        vector&lt;int&gt; p(n + 1, 0), pi(n + 1, 0);
        for (int i = 0; i &lt; n; ++i) {
            cin &gt;&gt; p[i + 1];
            pi[p[i + 1]] = i + 1;
        }
        if(p == pi) {
            cout &lt;&lt; "ambiguous\n";
        } else {
            cout &lt;&lt; "not ambiguous\n";
        }
    }   
    return 0;
}
</code></pre>]]></description><link>http://code-jedi.chintanghate.me/2014/11/07/permut2/</link><guid isPermaLink="false">c7ea02a8-f71f-4e0f-9ab1-52f9084d0d29</guid><category><![CDATA[SPOJ]]></category><dc:creator><![CDATA[Chintan Ghate]]></dc:creator><pubDate>Fri, 07 Nov 2014 11:44:07 GMT</pubDate></item><item><title><![CDATA[CANTON]]></title><description><![CDATA[<p>One of the famous proofs of modern mathematics is Georg Cantor's demonstration that the set of rational numbers is enumerable. The proof works by using an explicit enumeration of rational numbers as shown in the diagram below.  </p>

<pre><code>1/1  1/2   1/3   1/4   1/5 ...  
2/1  2/2   2/3   2/4  
3/1  3/2   3/3  
4/1  4/2  
5/1  
</code></pre>

<p>In the above diagram, the first term is 1/1, the second term is 1/2, the third term is 2/1, the fourth term is 3/1, the fifth term is 2/2, and so on.</p>

<h6 id="input">Input</h6>

<p>The input starts with a line containing a single integer t &lt;= 20, the number of test cases. t test cases follow.</p>

<p>Then, it contains a single number per line.</p>

<h6 id="output">Output</h6>

<p>You are to write a program that will read a list of numbers in the range from 1 to 10^7 and will print for each number the corresponding term in Cantor's enumeration as given below.</p>

<p>Example</p>

<p>Input: <br>
3 <br>
3 <br>
14 <br>
7</p>

<p>Output: <br>
TERM 3 IS 2/1 <br>
TERM 14 IS 2/4 <br>
TERM 7 IS 1/4</p>

<hr>

<pre><code class="prettyprint">#include &lt;iostream&gt;
#include &lt;vector&gt;

using namespace std;

int main() {  
    vector&lt;pair&lt;int,int&gt; &gt; range;
    int i = 1, dif = 0;
    range.push_back(make_pair(i,i));
    while (i &lt;= 10000000) {
        dif += 1;
        range.push_back(make_pair(i + 1,i + 1 + dif));
        i += (1 + dif);
    }

    int t;
    cin &gt;&gt; t;
    for(;t--;) {
        int n;
        cin &gt;&gt; n;
        for (int i = 0; i &lt; range.size(); ++i) {
            if (n &gt;= range[i].first &amp;&amp; n &lt;= range[i].second) {
                int row = i+1;
                if (row &amp; 1) {
                    int rangeDif = n - range[i].first;
                    int numertor = row - rangeDif;
                    int denominator = 1 + rangeDif;
                    cout &lt;&lt; "TERM " &lt;&lt; n &lt;&lt; " IS " &lt;&lt; numertor &lt;&lt; 
                            "/" &lt;&lt; denominator &lt;&lt; "\n"; 
                } else {
                    int rangeDif = n - range[i].first;
                    int numertor = 1 + rangeDif;
                    int denominator = row - rangeDif;
                    cout &lt;&lt; "TERM " &lt;&lt; n &lt;&lt; " IS " &lt;&lt; numertor &lt;&lt; 
                            "/" &lt;&lt; denominator &lt;&lt; "\n"; 
                }
            }
        }
    }
    return 0;
}
</code></pre>]]></description><link>http://code-jedi.chintanghate.me/2014/11/07/canton/</link><guid isPermaLink="false">e1f7597f-f6d5-4c36-936d-3484c2a0b7f0</guid><category><![CDATA[SPOJ]]></category><dc:creator><![CDATA[Chintan Ghate]]></dc:creator><pubDate>Fri, 07 Nov 2014 03:52:32 GMT</pubDate></item><item><title><![CDATA[ABSYS]]></title><description><![CDATA[<p>Jimmy is a hard-working pupil in his second year at primary school. Recently he decided to convert all his notes into an electronic version. Sadly, he found that his math notes were full of ink blots.</p>

<p>He scanned the notes and sent them through his own OCR package (yes, he coded it all by himself at the age of 8). The OCR package replaced all ink blots by the string "machula".</p>

<h6 id="problem">Problem</h6>

<p>You are given Jimmy's notes, processed by the OCR. They contain simple math exercises, which were used to practice addition on positive integers. Your task is to recover the damaged part of the notes.</p>

<h6 id="input">Input</h6>

<p>The first line of the input file contains an integer T specifying the number of test cases. Each test case is preceded by a blank line.</p>

<p>Each test case consists of exactly one line. The line represents an equation of the form "number + number = number", where each number is a positive integer. One part of the equation will be replaced by the string "machula". The string always covers a contiguous non-empty sequence of digits, possibly even an entire number. You may assume that for each equation in the input there will be exactly one way to fill in the missing digits.</p>

<h6 id="output">Output</h6>

<p>For each test case, the output shall contain one line of the form "number + number = number". The line must represent the equation from that test case with all missing digits filled in.</p>

<p>Example</p>

<p>Input: <br>
3</p>

<p>23 + 47 = machula</p>

<p>3247 + 5machula2 = 3749</p>

<p>machula13 + 75425 = 77038</p>

<p>Output: <br>
23 + 47 = 70 <br>
3247 + 502 = 3749 <br>
1613 + 75425 = 77038</p>

<hr>

<pre><code class="prettyprint">#include &lt;iostream&gt;
#include &lt;string&gt;
#include &lt;sstream&gt;

using namespace std;

int stringToInt(string s) {  
    if (s.find("machula") == string::npos) {
        istringstream iss(s);
        int n;
        iss &gt;&gt; n;
        return n;
    }
    return -1;
}

string intToString(int n) {  
    ostringstream oss;
    oss &lt;&lt; n;
    return oss.str();
}

string processed(string s) {  
    istringstream iss(s);
    string a, b, c, op;
    iss &gt;&gt; a &gt;&gt; op &gt;&gt; b &gt;&gt; op &gt;&gt; c;

    int A, B, C;
    A = stringToInt(a);
    B = stringToInt(b);
    C = stringToInt(c);

    if (A == -1) {
        A = C - B;
    } else if (B == -1) {
        B = C - A;
    } else if (C == -1) {
        C = A + B;
    }

    return intToString(A) + " + " + intToString(B) + " = " +       
           intToString(C);
}

int main() {  
    int T;
    cin &gt;&gt; T;
    cin.ignore();
    for (;T--;) {
        string S;
        cin.ignore();
        getline(cin,S);
        cout &lt;&lt; processed(S) &lt;&lt; "\n";
    }
    return 0;
}
</code></pre>]]></description><link>http://code-jedi.chintanghate.me/2014/11/07/absys/</link><guid isPermaLink="false">2f10d925-a6f2-4040-bd0c-9230c26718d9</guid><category><![CDATA[SPOJ]]></category><dc:creator><![CDATA[Chintan Ghate]]></dc:creator><pubDate>Fri, 07 Nov 2014 03:11:05 GMT</pubDate></item><item><title><![CDATA[PALIN]]></title><description><![CDATA[<p>A positive integer is called a palindrome if its representation in the decimal system is the same when read from left to right and from right to left. For a given positive integer K of not more than 1,000,000 digits, write the value of the smallest palindrome larger than K to output. Numbers are always displayed without leading zeros.</p>

<h6 id="input">Input</h6>

<p>The first line contains integer t, the number of test cases. Integers K are given in the next t lines.</p>

<h6 id="output">Output</h6>

<p>For each K, output the smallest palindrome larger than K.</p>

<p>Example</p>

<p>Input: <br>
2 <br>
808 <br>
2133</p>

<p>Output: <br>
818 <br>
2222</p>

<hr>

<pre><code class="prettyprint">#include &lt;iostream&gt;
#include &lt;string&gt;
#include &lt;algorithm&gt;

using namespace std;

bool isPalindrome(string s) {  
    string s1 = s;
    reverse(s.begin(), s.end());
    return s == s1;
}

string palin(string s) {  
    string s1 = s;
    for (int i = 0; i &lt; s.size()/2; ++i) {
        s[s.size() - i - 1] = s[i];
    }
    if (s &gt; s1) {
        return s;
    } else {
        int carry = 0;
        int cur = 0;
        int n = s.size()/2 + (s.size()%2 - 1);
        for (int i = n; i &gt;= 0; --i) {
            cur = s[i]-'0';
            if (i == n) {
                cur = cur + carry + 1;
            } else {
                cur += carry;
            }
            carry = cur / 10;
            cur %= 10;
            s[i] = char(cur+'0');
        }
        if(carry &gt; 0) {
            s = char(carry+'0') + s;
        }
        for (int i = 0; i &lt; s.size()/2; ++i) {
            s[s.size() - i - 1] = s[i];
        }
    }
    return s;
}

int main() {  
    int t;
    cin &gt;&gt; t;
    for (;t--;) {
        string K;
        cin &gt;&gt; K;
        cout &lt;&lt; palin(K) &lt;&lt; "\n";
    }    
    return 0;
}
</code></pre>]]></description><link>http://code-jedi.chintanghate.me/2014/11/06/palin/</link><guid isPermaLink="false">7f08e0bb-34ab-449a-a4be-3595be29f26f</guid><category><![CDATA[SPOJ]]></category><dc:creator><![CDATA[Chintan Ghate]]></dc:creator><pubDate>Thu, 06 Nov 2014 16:50:48 GMT</pubDate></item><item><title><![CDATA[HANGOVER]]></title><description><![CDATA[<p>How far can you make a stack of cards overhang a table? If you have one card, you can create a maximum overhang of half a card length. (We're assuming that the cards must be perpendicular to the table.) With two cards you can make the top card overhang the bottom one by half a card length, and the bottom one overhang the table by a third of a card length, for a total maximum overhang of 1/2 + 1/3 = 5/6 card lengths. In general you can make n cards overhang by 1/2 + 1/3 + 1/4 + ... + 1/(n + 1) card lengths, where the top card overhangs the second by 1/2, the second overhangs tha third by 1/3, the third overhangs the fourth by 1/4, etc., and the bottom card overhangs the table by 1/(n + 1). This is illustrated in the figure below.</p>

<p><img src="http://code-jedi.chintanghate.me/content/images/2014/11/wanderley-hangover.jpg" alt="Figure"></p>

<h6 id="input">Input</h6>

<p>The input consists of one or more test cases, followed by a line containing the number 0.00 that signals the end of the input. Each test case is a single line containing a positive floating-point number c whose value is at least 0.01 and at most 5.20; c will contain exactly three digits.</p>

<h6 id="output">Output</h6>

<p>For each test case, output the minimum number of cards necessary to achieve an overhang of at least c card lengths. Use the exact output format shown in the examples.</p>

<p>Example</p>

<p>Input: <br>
1.00 <br>
3.71 <br>
0.04 <br>
5.19 <br>
0.00</p>

<p>Output: <br>
3 card(s) <br>
61 card(s) <br>
1 card(s) <br>
273 card(s)</p>

<hr>

<pre><code class="prettyprint">#include &lt;iostream&gt;

using namespace std;

int main() {  
    double c;
    while((cin &gt;&gt; c) &amp;&amp; c != 0.00) {
        double i = 2, t = 0;
        while (t &lt; c) {
            t += 1.0/i;
            i += 1;
        }
        cout &lt;&lt; i-2 &lt;&lt; " card(s)\n";
    }
    return 0;
}
</code></pre>]]></description><link>http://code-jedi.chintanghate.me/2014/11/06/hangover/</link><guid isPermaLink="false">827b0aef-e1ba-43e9-9868-e7e9f8a954af</guid><category><![CDATA[SPOJ]]></category><dc:creator><![CDATA[Chintan Ghate]]></dc:creator><pubDate>Thu, 06 Nov 2014 15:35:12 GMT</pubDate></item><item><title><![CDATA[EIGHTS]]></title><description><![CDATA[<p>Pattern Matchers have been designed for various sorts of patterns. Mr. HKP likes to observe patterns in numbers. After completing his extensive research on the squares of numbers, he has moved on to cubes. Now he wants to know all numbers whose cube ends in 888.</p>

<p>Given a number k, help Mr. HKP find the kth number (indexed from 1) whose cube ends in 888.</p>

<h6 id="input">Input</h6>

<p>The first line of the input contains an integer t, the number of test cases. t test cases follow.</p>

<p>Each test case consists of a single line containing a single integer k (1 &lt;= k &lt;= 2,000,000,000,000).</p>

<h6 id="output">Output</h6>

<p>For each test case, output a single integer which denotes the kth number whose cube ends in 888. The result will be less than 263.</p>

<p>Example</p>

<p>Input: <br>
1 <br>
1</p>

<p>Output: <br>
192</p>

<hr>

<pre><code class="prettyprint">#include &lt;iostream&gt;
#include &lt;vector&gt;

using namespace std;

int main() {  
    vector&lt;int&gt; pattern;
    pattern.push_back(192);
    pattern.push_back(442);
    pattern.push_back(692);
    pattern.push_back(942);

    int t;
    cin &gt;&gt; t;
    for(;t--;) {
        unsigned long long n;
        cin &gt;&gt; n;
        cout &lt;&lt; ((n - 1) / 4) * 1000 + pattern[(n - 1) % 4] &lt;&lt; "\n";
    }
    return 0;
}
</code></pre>]]></description><link>http://code-jedi.chintanghate.me/2014/11/06/eights/</link><guid isPermaLink="false">cf52e075-2603-4adb-a28e-74ebc16e7fd5</guid><category><![CDATA[SPOJ]]></category><dc:creator><![CDATA[Chintan Ghate]]></dc:creator><pubDate>Thu, 06 Nov 2014 14:32:55 GMT</pubDate></item><item><title><![CDATA[COINS]]></title><description><![CDATA[<p>In Byteland they have a very strange monetary system.</p>

<p>Each Bytelandian gold coin has an integer number written on it. A coin n can be exchanged in a bank into three coins: n/2, n/3 and n/4. But these numbers are all rounded down (the banks have to make a profit).</p>

<p>You can also sell Bytelandian coins for American dollars. The exchange rate is 1:1. But you can not buy Bytelandian coins.</p>

<p>You have one gold coin. What is the maximum amount of American dollars you can get for it?</p>

<h6 id="input">Input</h6>

<p>The input will contain several test cases (not more than 10). Each testcase is a single line with a number n, 0 &lt;= n &lt;= 1,000,000,000. It is the number written on your coin.</p>

<h6 id="output">Output</h6>

<p>For each test case output a single line, containing the maximum amount of American dollars you can make.</p>

<p>Example</p>

<p>Input: <br>
12 <br>
2</p>

<p>Output: <br>
13 <br>
2</p>

<p>You can change 12 into 6, 4 and 3, and then change these into $6+$4+$3 = $13. If you try changing the coin 2 into 3 smaller coins, you will get 1, 0 and 0, and later you can get no more than $1 out of them. It is better just to change the 2 coin directly into $2.</p>

<hr>

<pre><code class="prettyprint">#include &lt;iostream&gt;
#include &lt;deque&gt;
#include &lt;set&gt;
#include &lt;vector&gt;

using namespace std;

int main() {

    vector&lt;int&gt; preCompute(1000001,0);

    for (int i = 0; i &lt;= 1000000; ++i) {
        int divided = preCompute[i/2] + preCompute[i/3] + 
                      preCompute[i/4];
        if (divided &gt; i) {
            preCompute[i] = divided;
        } else {
            preCompute[i] = i;
        }
    }

    int n;

    while (cin &gt;&gt; n) {
        deque&lt;int&gt; q;
        q.push_back(n);

        set&lt;int&gt; doNotDivide;
        long long total = 0;

        while(!q.empty()) {
            int x = q.front();

            if(x &lt;= 1000000) {
                total += preCompute[x];
            } else if (doNotDivide.find(x) == doNotDivide.end() &amp;&amp; 
                      (x/2 + x/3 + x/4) &gt;= x) {
                q.push_back(x/2);
                q.push_back(x/3);
                q.push_back(x/4);
            } else {
                total += x;
                doNotDivide.insert(x);
            }
            q.pop_front();
        }
        cout &lt;&lt; total &lt;&lt; "\n";
    }
    return 0;
}
</code></pre>]]></description><link>http://code-jedi.chintanghate.me/2014/11/06/coins/</link><guid isPermaLink="false">05cf5cc6-7d69-4745-8939-b270443ea6a0</guid><category><![CDATA[SPOJ]]></category><dc:creator><![CDATA[Chintan Ghate]]></dc:creator><pubDate>Thu, 06 Nov 2014 04:52:37 GMT</pubDate></item><item><title><![CDATA[CANDY3]]></title><description><![CDATA[<p>A class went to a school trip. And, as usually, all N kids have got their backpacks stuffed with candy. But soon quarrels started all over the place, as some of the kids had more candies than others. Soon, the teacher realized that he has to step in: "Everybody, listen! Put all the candies you have on this table here!"</p>

<p>Soon, there was quite a large heap of candies on the teacher's table. "Now, I will divide the candies into N equal heaps and everyone will get one of them." announced the teacher.</p>

<p>"Wait, is this really possible?" wondered some of the smarter kids.</p>

<h6 id="problem">Problem</h6>

<p>You are given the number of candies each child brought. Find out whether the teacher can divide the candies into N exactly equal heaps. (For the purpose of this task, all candies are of the same type.)</p>

<h6 id="input">Input</h6>

<p>The first line of the input file contains an integer T specifying the number of test cases. Each test case is preceded by a blank line.</p>

<p>Each test case looks as follows: The first line contains N : the number of children. Each of the next N lines contains the number of candies one child brought.</p>

<h6 id="output">Output</h6>

<p>For each of the test cases output a single line with a single word "YES" if the candies can be distributed equally, or "NO" otherwise.</p>

<p>Example</p>

<p>Input: <br>
2</p>

<p>5 <br>
5 <br>
2 <br>
7 <br>
3 <br>
8</p>

<p>6 <br>
7 <br>
11 <br>
2 <br>
7 <br>
3 <br>
4</p>

<p>Output: <br>
YES <br>
NO</p>

<hr>

<pre><code class="prettyprint">#include &lt;iostream&gt;

using namespace std;

int main() {  
    int T;
    cin &gt;&gt; T;

    for(;T--;) {
        unsigned long long N;
        cin &gt;&gt; N;

        unsigned long long total = 0;
        for (int i = 0; i &lt; N; ++i) {
            unsigned long long x;
            cin &gt;&gt; x;
            total = (total + x) % N;
        }

        if (total % N == 0) {
            cout &lt;&lt; "YES\n";
        } else {
            cout &lt;&lt; "NO\n";
        }
    }
    return 0;
}
</code></pre>]]></description><link>http://code-jedi.chintanghate.me/2014/11/06/candy3/</link><guid isPermaLink="false">d18b1659-698e-42e5-9464-d401ed545110</guid><category><![CDATA[SPOJ]]></category><dc:creator><![CDATA[Chintan Ghate]]></dc:creator><pubDate>Thu, 06 Nov 2014 04:17:05 GMT</pubDate></item><item><title><![CDATA[AE00]]></title><description><![CDATA[<p>Byteman has a collection of N squares with side 1. How many different rectangles can he form using these squares?</p>

<p>Two rectangles are considered different if none of them can be rotated and moved to obtain the second one. During rectangle construction, Byteman can neither deform the squares nor put any squares upon any other ones.</p>

<h6 id="input">Input</h6>

<p>The first and only line of the standard input contains one integer N (1 ≤ N ≤ 10000).</p>

<h6 id="output">Output</h6>

<p>The first and only line of the standard output should contain a single integer equal to the number of different rectangles that Byteman can form using his squares.</p>

<p>Example</p>

<p>Input: <br>
6</p>

<p>Output: <br>
8</p>

<p><img src="http://code-jedi.chintanghate.me/content/images/2014/11/ae00.jpg" alt="Illustration"></p>

<hr>

<pre><code class="prettyprint">#include &lt;iostream&gt;
#include &lt;cmath&gt;

using namespace std;

int main() {  
    int N;
    cin &gt;&gt; N;

    int squares = 0;
    for (int i = 1; i &lt;= N; ++i) {
        for (int j = 1; j &lt;= sqrt(i); ++j)
        {
            if(i%j == 0) {
                ++squares;
            }
        }
    }
    cout &lt;&lt; squares &lt;&lt; "\n";
    return 0;
}
</code></pre>]]></description><link>http://code-jedi.chintanghate.me/2014/11/06/ae00/</link><guid isPermaLink="false">c3c7f42b-4b47-4472-b147-34bde82f18c4</guid><category><![CDATA[SPOJ]]></category><dc:creator><![CDATA[Chintan Ghate]]></dc:creator><pubDate>Thu, 06 Nov 2014 04:05:44 GMT</pubDate></item><item><title><![CDATA[LASTDIG]]></title><description><![CDATA[<p>Nestor was doing the work of his math class about three days but he is tired of make operations a lot and he should deliver his task tomorrow. His math’s teacher gives two numbers a and b. The problem consist in find the last digit of the potency of base a and index b. Help Nestor with his problem. You are given two integer numbers: the base a (0 &lt;= a &lt;= 20) and the index b (0 &lt;= b &lt;= 2,147,483,000), a and b both are not 0. You have to find the last digit of a^b.</p>

<h6 id="input">Input</h6>

<p>The first line of input contains an integer t, the number of test cases (t &lt;= 30). t test cases follow. For each test case will appear a and b separated by space.</p>

<h6 id="output">Output</h6>

<p>For each test case output an integer per line representing the result.</p>

<p>Example</p>

<p>Input: <br>
2 <br>
3 10 <br>
6 2</p>

<p>Output: <br>
9 <br>
6</p>

<hr>

<pre><code class="prettyprint">#include &lt;iostream&gt;
#include &lt;vector&gt;

using namespace std;

long long mod(long long a, long long b) {  
    return (a % b &lt; 0 ? a % b + b : a % b);
}

int powMod10(long long a, long long b) {  
    if (b == 0) {
        return 1;
    } else if (a == 0) {
        return 0;
    } else {
        vector &lt;long long&gt; powers;
        powers.push_back(a%10);

        do {
            powers.push_back((powers.back()*(a%10))%10);
        } while(powers.back() != powers.front());

        int cycleSize = powers.size() - 1;
        return powers[mod((b-1),cycleSize)];
    }
    return 0;
}

int main() {  
    int t;
    cin &gt;&gt; t;

    for (;t--;) {
        long long a, b;
        cin &gt;&gt; a &gt;&gt; b;
        cout &lt;&lt; powMod10(a, b) &lt;&lt; "\n";
    }
    return 0;
}
</code></pre>]]></description><link>http://code-jedi.chintanghate.me/2014/11/06/lastdig/</link><guid isPermaLink="false">d64aa5b2-b645-44fd-80ab-e8fd44b1e99c</guid><category><![CDATA[SPOJ]]></category><dc:creator><![CDATA[Chintan Ghate]]></dc:creator><pubDate>Thu, 06 Nov 2014 03:50:48 GMT</pubDate></item><item><title><![CDATA[JULKA]]></title><description><![CDATA[<p>Julka surprised her teacher at preschool by solving the following riddle:</p>

<p>Klaudia and Natalia have 10 apples together, but Klaudia has two apples more than Natalia. How many apples does each of he girls have?</p>

<p>Julka said without thinking: Klaudia has 6 apples and Natalia 4 apples. The teacher tried to check if Julka's answer wasn't accidental and repeated the riddle every time increasing the numbers. Every time Julka answered correctly. The surprised teacher wanted to continue questioning Julka, but with big numbers she could't solve the riddle fast enough herself. Help the teacher and write a program which will give her the right answers.</p>

<h6 id="task">Task</h6>

<ul>
<li>Write a program which reads from standard input the number of apples the girls have together and how many more apples Klaudia has.</li>
<li>Counts the number of apples belonging to Klaudia and the number of apples belonging to Natalia.</li>
<li>Writes the outcome to standard output.</li>
</ul>

<h6 id="input">Input</h6>

<p>Ten test cases (given one under another, you have to process all!). Every test case consists of two lines. The first line says how many apples both girls have together. The second line says how many more apples Klaudia has. Both numbers are positive integers. It is known that both girls have no more than 10<sup>100</sup> (1 and 100 zeros) apples together. As you can see apples can be very small.</p>

<h6 id="output">Output</h6>

<p>For every test case your program should output two lines. The first line should contain the number of apples belonging to Klaudia. The second line should contain the number of apples belonging to Natalia.</p>

<p>Example</p>

<p>Input: <br>
10 <br>
2 <br>
[and 9 test cases more]</p>

<p>Output: <br>
6 <br>
4 <br>
[and 9 test cases more]</p>

<hr>

<pre><code class="prettyprint">#include &lt;iostream&gt;
#include &lt;vector&gt;
#include &lt;string&gt;

using namespace std;

string vectorToIntString(vector&lt;int&gt; A) {  
    string S = "";
    bool flag = false;
    for (int i = A.size() - 1; i &gt;= 0 ; --i) {
        if (!flag &amp;&amp; A[i] == 0) {
            continue;
        } else {
            flag = true;
            S += char(A[i]+'0');
        }
    }
    return S;
}

//(A-B)
vector&lt;int&gt; vectorSubstraction(vector&lt;int&gt; A, vector&lt;int&gt; B) {  
    for (int i = 0; i &lt; A.size(); ++i) {
        if (A[i] &gt;= B[i]) {
            A[i] -= B[i];
        } else {
            A[i] += 10;
            A[i] -= B[i];
            --A[i+1];
        }
    }
    return A;
}

//(A/n)
vector&lt;int&gt; vectorDivision(vector&lt;int&gt; A, int n) {  
    int current = 0;
    for (int i = A.size() - 1; i &gt;= 0; --i)
    {
        current *= 10;
        current += A[i];
        A[i] = current / 2;
        current %= 2;
    }
    return A;
}

int main() {  
    for (int T = 0; T &lt; 10; ++T) {
        string t, m;
        cin &gt;&gt; t &gt;&gt; m;
        vector&lt;int&gt; total(102,0), more(102,0), totalCopy(102,0);
        for (int i = 0; i &lt; t.size(); ++i) {
            total[i] = t[t.size()-1-i]-'0';
        }
        totalCopy = total;
        for (int i = 0; i &lt; m.size(); ++i) {
            more[i] = m[m.size()-1-i] - '0';
        }

        total = vectorSubstraction(total,more);
        total = vectorDivision(total,2);
        totalCopy = vectorSubstraction(totalCopy,total);
        cout &lt;&lt; vectorToIntString(totalCopy) &lt;&lt; "\n";
        cout &lt;&lt; vectorToIntString(total) &lt;&lt; "\n";
    }
    return 0;
}
</code></pre>]]></description><link>http://code-jedi.chintanghate.me/2014/11/05/julka/</link><guid isPermaLink="false">c097ec1f-52d9-489f-a1f7-5992d20768a2</guid><category><![CDATA[SPOJ]]></category><dc:creator><![CDATA[Chintan Ghate]]></dc:creator><pubDate>Wed, 05 Nov 2014 09:36:58 GMT</pubDate></item></channel></rss>